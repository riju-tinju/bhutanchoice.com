<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin - Bhutan State Lotteries</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
  <style>
    * {
      font-family: 'Poppins', sans-serif;
    }

    /* Remove default tap highlight on mobile for all elements */
    * {
      -webkit-tap-highlight-color: transparent;
    }

    body {
      background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
      min-height: 100vh;
    }

    .app-header {
      background: linear-gradient(135deg, #FF6B6B 0%, #6A82FB 50%, #45EBA5 100%);
      background-size: 300% 300%;
      animation: gradientShift 6s ease infinite;
    }

    @keyframes gradientShift {
      0% {
        background-position: 0% 50%;
      }

      50% {
        background-position: 100% 50%;
      }

      100% {
        background-position: 0% 50%;
      }
    }

    .card-expand {
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      transform-origin: top;
    }

    .card-expand.expanded {
      transform: scaleY(1);
      opacity: 1;
      max-height: 800px;
    }

    .card-expand.collapsed {
      transform: scaleY(0);
      opacity: 0;
      max-height: 0;
      overflow: hidden;
    }

    .lottery-card {
      border-radius: 20px;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
      position: relative;
      overflow: hidden;
      min-height: 44px;
      padding: 28px !important;
    }

    .lottery-card::before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      width: 6px;
      height: 100%;
      border-radius: 20px 0 0 20px;
    }

    .lottery-card:active {
      transform: scale(0.98);
    }

    .lottery-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
    }

    .kerala-card {
      background: linear-gradient(135deg, #FF6B6B 0%, #FF8E8E 100%);
    }

    .kerala-card::before {
      background: #FF4444;
    }

    .maharashtra-card {
      background: linear-gradient(135deg, #6A82FB 0%, #8FA8FF 100%);
    }

    .maharashtra-card::before {
      background: #4263EB;
    }

    .punjab-card {
      background: linear-gradient(135deg, #45EBA5 0%, #6BFFB8 100%);
    }

    .punjab-card::before {
      background: #20C997;
    }

    .upcoming-card-1 {
      background: linear-gradient(135deg, #FFC93C 0%, #FFD666 100%);
    }

    .upcoming-card-1::before {
      background: #FFB020;
    }

    .upcoming-card-2 {
      background: linear-gradient(135deg, #A855F7 0%, #C084FC 100%);
    }

    .upcoming-card-2::before {
      background: #9333EA;
    }

    .upcoming-card-3 {
      background: linear-gradient(135deg, #EC4899 0%, #F472B6 100%);
    }

    .upcoming-card-3::before {
      background: #DB2777;
    }

    .upcoming-card-4 {
      background: linear-gradient(135deg, #3B82F6 0%, #60A5FA 100%);
    }

    .upcoming-card-4::before {
      background: #2563EB;
    }

    .upcoming-card-5 {
      background: linear-gradient(135deg, #10B981 0%, #34D399 100%);
    }

    .upcoming-card-5::before {
      background: #059669;
    }

    .upcoming-card-6 {
      background: linear-gradient(135deg, #F59E0B 0%, #FBBF24 100%);
    }

    .upcoming-card-6::before {
      background: #D97706;
    }

    .upcoming-card-7 {
      background: linear-gradient(135deg, #6366F1 0%, #818CF8 100%);
    }

    .upcoming-card-7::before {
      background: #4F46E5;
    }

    .past-card1 {
      background: linear-gradient(135deg, #F59E0B 0%, #FBBF24 100%);
    }

    .past-card1::before {
      background: #D97706;
    }

    .past-card2 {
      background: linear-gradient(135deg, #10B981 0%, #34D399 100%);
    }

    .past-card2::before {
      background: #059669;
    }

    .past-card3 {
      background: linear-gradient(135deg, #6366F1 0%, #818CF8 100%);
    }

    .past-card3::before {
      background: #4F46E5;
    }

    .past-card4 {
      background: linear-gradient(135deg, #EC4899 0%, #F472B6 100%);
    }

    .past-card4::before {
      background: #DB2777;
    }

    .past-card5 {
      background: linear-gradient(135deg, #A855F7 0%, #C084FC 100%);
    }

    .past-card5::before {
      background: #9333EA;
    }

    .past-card6 {
      background: linear-gradient(135deg, #FFC93C 0%, #FFD666 100%);
    }

    .past-card6::before {
      background: #FFB020;
    }

    /* Past Card styles for each day */
    .Sunday-card {
      background: linear-gradient(135deg, #F43F5E 0%, #FB7185 100%);
    }

    .Sunday-card::before {
      background: #E11D48;
    }

    .Monday-card {
      background: linear-gradient(135deg, #A855F7 0%, #C084FC 100%);
    }

    .Monday-card::before {
      background: #9333EA;
    }

    .Tuesday-card {
      background: linear-gradient(135deg, #F97316 0%, #FB923C 100%);
    }

    .Tuesday-card::before {
      background: #EA580C;
    }

    .Wednesday-card {
      background: linear-gradient(135deg, #22C55E 0%, #4ADE80 100%);
    }

    .Wednesday-card::before {
      background: #16A34A;
    }

    .Thursday-card {
      background: linear-gradient(135deg, #3B82F6 0%, #60A5FA 100%);
    }

    .Thursday-card::before {
      background: #2563EB;
    }

    .Friday-card {
      background: linear-gradient(135deg, #EC4899 0%, #F472B6 100%);
    }

    .Friday-card::before {
      background: #DB2777;
    }

    .Saturday-card {
      background: linear-gradient(135deg, #EAB308 0%, #FACC15 100%);
    }

    .Saturday-card::before {
      background: #CA8A04;
    }

    .countdown-badge {
      background: linear-gradient(45deg, #667eea, #764ba2);
      border-radius: 12px;
      color: white;
      font-weight: 800;
      min-width: 50px;
      min-height: 50px;
      font-family: 'Courier New', monospace;
      box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
      font-size: 1.1rem;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .prize-badge {
      background: linear-gradient(45deg, #ffd700, #ffed4a);
      color: #744210;
      font-weight: 700;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(255, 215, 0, 0.3);
    }

    .live-badge {
      background: linear-gradient(45deg, #10B981, #34D399);
      color: white;
      animation: pulse 2s infinite;
      font-size: 0.875rem;
      font-weight: 800;
      padding: 6px 12px;
    }

    .result-badge {
      background: linear-gradient(45deg, #3B82F6, #60A5FA);
      color: white;
      font-size: 0.875rem;
      font-weight: 800;
      padding: 6px 12px;
    }

    .upcoming-badge {
      background: linear-gradient(45deg, #F59E0B, #FBBF24);
      color: white;
      animation: glow 2s infinite alternate;
      font-size: 0.875rem;
      font-weight: 800;
      padding: 6px 12px;
    }

    .next-draw-badge {
      background: linear-gradient(45deg, #10B981, #34D399);
      color: white;
      animation: pulse 2s infinite;
      font-size: 0.875rem;
      font-weight: 800;
      padding: 6px 12px;
    }

    .refresh-btn {
      background: linear-gradient(135deg, #F59E0B 0%, #F97316 100%);
      color: white;
      border: none;
      border-radius: 8px;
      padding: 8px 16px;
      font-size: 0.875rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .refresh-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(245, 158, 11, 0.3);
    }

    .refresh-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    @keyframes pulse {

      0%,
      100% {
        transform: scale(1);
      }

      50% {
        transform: scale(1.05);
      }
    }

    @keyframes glow {
      0% {
        box-shadow: 0 4px 12px rgba(245, 158, 11, 0.3);
      }

      100% {
        box-shadow: 0 6px 20px rgba(245, 158, 11, 0.5);
      }
    }

    .past-badge {
      background: linear-gradient(45deg, #6B7280, #9CA3AF);
      color: white;
      font-size: 0.875rem;
      font-weight: 800;
      padding: 6px 12px;
    }

    .result-container {
      backdrop-filter: blur(10px);
      border-radius: 16px;
      padding: 24px !important;
    }

    .winning-number {
      color: #374151;
      font-weight: 800;
      letter-spacing: 2px;
      font-size: 1.3rem;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .winning-number-small {
      color: #374151;
      font-weight: 700;
      letter-spacing: 1px;
      font-size: 1.05rem;
    }

    .prize-row {
      border-radius: 8px;
      transition: all 0.2s ease;
    }

    .prize-row:hover {
      background: rgba(255, 255, 255, 0.8);
    }

    .load-more-btn {
      background: linear-gradient(135deg, #10B981 0%, #059669 100%);
      transition: all 0.3s ease;
      border-radius: 12px;
      font-weight: 600;
      min-height: 44px;
    }

    .load-more-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
    }

    .section-title {
      background: linear-gradient(135deg, #374151 0%, #4B5563 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      font-weight: 800;
    }

    .bounce-in {
      animation: bounceIn 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    }

    @keyframes bounceIn {
      0% {
        transform: scale(0.3) translateY(50px);
        opacity: 0;
      }

      50% {
        transform: scale(1.05) translateY(-10px);
        opacity: 0.8;
      }

      70% {
        transform: scale(0.95) translateY(0px);
        opacity: 0.9;
      }

      100% {
        transform: scale(1) translateY(0px);
        opacity: 1;
      }
    }

    .card-text {
      color: rgb(255, 255, 255);
      text-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
    }

    .card-text-secondary {
      color: rgb(255, 255, 255);
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }

    .countdown-container {
      background: rgba(255, 255, 255, 0.1);
      border-radius: 12px;
      padding: 16px;
      backdrop-filter: blur(5px);
      margin-top: 16px;
    }

    .countdown-label {
      font-size: 0.9rem;
      font-weight: 600;
      color: rgba(255, 255, 255, 0.9);
    }

    .card-lottery-name {
      font-size: 1.5rem;
      font-weight: 700;
      margin-bottom: 12px;
      line-height: 1.3;
    }

    .card-date {
      font-size: 1rem;
      font-weight: 600;
    }

    .card-prize {
      font-size: 1.125rem;
      font-weight: 700;
    }

    .card-element-spacing>* {
      margin-bottom: 16px;
    }

    .card-element-spacing>*:last-child {
      margin-bottom: 0;
    }

    .result-card {
      border-radius: 12px;
      overflow: hidden;
      margin-bottom: 16px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .result-card-header {
      background: linear-gradient(135deg, #3B82F6 0%, #1D4ED8 100%);
      color: white;
      padding: 8px 20px;
      font-weight: 700;
      font-size: .96rem;
      text-align: center;
    }

    .result-card-content {
      background: white;
      padding: 16px 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .result-prize-amount {
      font-size: 1.6rem;
      font-weight: 900;
      color: #059669;
      margin-bottom: 8px;
      line-height: 1.2;
    }

    .result-winning-number {
      font-size: 1.5rem;
      font-weight: 700;
      color: #374151;
      font-family: "ui-monospace", "SFMono-Regular", "Menlo", "Monaco", "Consolas", "Liberation Mono", "Courier New", "monospace";
      letter-spacing: 2px;
      border: 3px solid rgb(229, 229, 229);
      border-radius: 6px;
      background-color: #d9daeb63;
      padding: 0px 12px;
    }

    .result-location {
      font-size: 0.9rem;
      color: #6B7280;
      font-weight: 500;
    }

    /* Admin specific styles */
    .admin-btn {
      background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
      color: white;
      border: none;
      border-radius: 8px;
      padding: 8px 16px;
      font-size: 0.875rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      margin: 0 4px;
    }

    .admin-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
    }

    .admin-btn.edit-btn {
      background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
    }

    .admin-btn.edit-btn:hover {
      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    }

    .admin-btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    .create-btn {
      background: linear-gradient(135deg, #10B981 0%, #059669 100%);
      color: white;
      border: none;
      border-radius: 12px;
      padding: 16px 32px;
      font-size: 1.1rem;
      font-weight: 700;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
    }

    .create-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4);
    }

    .settings-btn {
      position: fixed;
      bottom: 20px;
      right: 20px;
      width: 56px;
      height: 56px;
      background: linear-gradient(135deg, #6B7280 0%, #4B5563 100%);
      color: white;
      border: none;
      border-radius: 50%;
      font-size: 1.5rem;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 12px rgba(107, 114, 128, 0.3);
      z-index: 1000;
    }

    .settings-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(107, 114, 128, 0.4);
    }

    /* Enhanced Modal styles */
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      backdrop-filter: blur(5px);
    }

    .modal.show {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }

    .modal-content {
      background: white;
      border-radius: 16px;
      max-width: 700px;
      width: 100%;
      max-height: 90vh;
      overflow-y: auto;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
      position: relative;
    }

    .modal-header {
      background: linear-gradient(135deg, #3B82F6 0%, #1D4ED8 100%);
      color: white;
      padding: 24px;
      border-radius: 16px 16px 0 0;
      position: sticky;
      top: 0;
      z-index: 10;
    }

    .modal-title {
      font-size: 1.5rem;
      font-weight: 700;
      margin: 0;
    }

    .modal-body {
      padding: 24px;
    }

    .form-section {
      margin-bottom: 32px;
      padding: 20px;
      background: #F8FAFC;
      border-radius: 12px;
      border: 1px solid #E2E8F0;
    }

    .form-section-title {
      font-size: 1.2rem;
      font-weight: 700;
      color: #374151;
      margin-bottom: 16px;
      display: flex;
      align-items: center;
    }

    .form-section-title i {
      margin-right: 10px;
      color: #3B82F6;
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: #374151;
      font-size: 0.95rem;
    }

    .form-input {
      width: 100%;
      padding: 12px 16px;
      border: 2px solid #E5E7EB;
      border-radius: 8px;
      font-size: 1rem;
      transition: all 0.3s ease;
      font-family: inherit;
    }

    .form-input:focus {
      outline: none;
      border-color: #3B82F6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .form-actions {
      display: flex;
      gap: 12px;
      justify-content: flex-end;
      margin-top: 32px;
      padding-top: 20px;
      border-top: 1px solid #E5E7EB;
    }

    .btn {
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 0.95rem;
    }

    .btn-primary {
      background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
      color: white;
    }

    .btn-primary:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    }

    .btn-secondary {
      background: #E5E7EB;
      color: #374151;
    }

    .btn-secondary:hover {
      background: #D1D5DB;
      transform: translateY(-1px);
    }

    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    /* Enhanced Prize Item Design */
    .prize-item {
      display: flex;
      align-items: center;
      gap: 12px;
      margin-bottom: 16px;
      padding: 16px;
      background: white;
      border-radius: 12px;
      border: 2px solid #E5E7EB;
      transition: all 0.3s ease;
    }

    .prize-item:hover {
      border-color: #3B82F6;
      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.1);
    }

    .prize-rank-display {
      background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
      color: white;
      padding: 8px 16px;
      border-radius: 8px;
      font-weight: 700;
      font-size: 0.9rem;
      min-width: 80px;
      text-align: center;
      flex-shrink: 0;
    }

    .prize-amount-input {
      flex: 1;
      padding: 10px 14px;
      border: 2px solid #E5E7EB;
      border-radius: 8px;
      font-size: 1rem;
      transition: all 0.3s ease;
      max-width: 100%;
    }

    .prize-amount-input:focus {
      outline: none;
      border-color: #3B82F6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .remove-prize {
      background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
      color: white;
      border: none;
      border-radius: 8px;
      padding: 8px 12px;
      cursor: pointer;
      font-size: 0.875rem;
      font-weight: 600;
      transition: all 0.3s ease;
      flex-shrink: 0;
    }

    .remove-prize:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
    }

    .add-prize {
      background: linear-gradient(135deg, #10B981 0%, #059669 100%);
      color: white;
      border: none;
      border-radius: 8px;
      padding: 12px 24px;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .add-prize:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
    }

    /* Winner Item Design */
    .winner-item {
      display: flex;
      align-items: center;
      gap: 12px;
      margin-bottom: 16px;
      padding: 16px;
      background: white;
      border-radius: 12px;
      border: 2px solid #E5E7EB;
      transition: all 0.3s ease;
    }

    .winner-item:hover {
      border-color: #059669;
      box-shadow: 0 4px 12px rgba(5, 150, 105, 0.1);
    }

    .winner-rank-display {
      background: linear-gradient(135deg, #059669 0%, #047857 100%);
      color: white;
      padding: 8px 16px;
      border-radius: 8px;
      font-weight: 700;
      font-size: 0.9rem;
      min-width: 80px;
      text-align: center;
      flex-shrink: 0;
    }

    .winner-ticket-input {
      flex: 1;
      padding: 10px 14px;
      border: 2px solid #E5E7EB;
      border-radius: 8px;
      font-size: 1rem;
      transition: all 0.3s ease;
      font-family: "ui-monospace", "SFMono-Regular", "Menlo", "Monaco", "Consolas", "Liberation Mono", "Courier New", "monospace";
      letter-spacing: 1px;
    }

    .winner-ticket-input:focus {
      outline: none;
      border-color: #059669;
      box-shadow: 0 0 0 3px rgba(5, 150, 105, 0.1);
    }

    .remove-winner {
      background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
      color: white;
      border: none;
      border-radius: 8px;
      padding: 8px 12px;
      cursor: pointer;
      font-size: 0.875rem;
      font-weight: 600;
      transition: all 0.3s ease;
      flex-shrink: 0;
    }

    .remove-winner:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
    }

    .add-winner {
      background: linear-gradient(135deg, #059669 0%, #047857 100%);
      color: white;
      border: none;
      border-radius: 8px;
      padding: 12px 24px;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .add-winner:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(5, 150, 105, 0.3);
    }

    /* Toast notification */
    .toast {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 16px 24px;
      border-radius: 8px;
      color: white;
      font-weight: 600;
      z-index: 1100;
      transform: translateX(100%);
      transition: transform 0.3s ease;
    }

    .toast.show {
      transform: translateX(0);
    }

    .toast.success {
      background: linear-gradient(135deg, #10B981 0%, #059669 100%);
    }

    .toast.error {
      background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
    }

    /* Grid Layout for Form */
    .form-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
    }

    .form-grid-full {
      grid-column: span 2;
    }

    /* Mobile Responsive Design */
    @media (max-width: 768px) {
      .lottery-card {
        padding: 20px !important;
      }

      .result-container {
        padding: 16px !important;
      }

      .countdown-badge {
        min-width: 40px;
        min-height: 40px;
        font-size: 0.9rem;
      }

      .card-lottery-name {
        font-size: 1.25rem;
      }

      .card-date {
        font-size: 0.9rem;
      }

      .card-prize {
        font-size: 1rem;
      }

      .modal-content {
        width: 95%;
        max-height: 95vh;
      }

      .modal-header {
        padding: 16px;
      }

      .modal-body {
        padding: 16px;
      }

      .admin-btn {
        padding: 6px 12px;
        font-size: 0.75rem;
      }

      .form-grid {
        grid-template-columns: 1fr;
      }

      .form-grid-full {
        grid-column: span 1;
      }

      .prize-item {
        flex-wrap: wrap;
      }

      .prize-rank-display {
        min-width: 60px;
      }

      .winner-item {
        flex-wrap: wrap;
      }

      .winner-rank-display {
        min-width: 60px;
      }

      .form-actions {
        flex-direction: column;
      }

      .create-btn {
        padding: 12px 24px;
        font-size: 1rem;
      }
    }

    /* Mobile Responsive Design */
    @media (max-width: 768px) {
      .lottery-card {
        padding: 24px !important;
      }

      .result-container {
        padding: 20px !important;
      }

      .countdown-badge {
        min-width: 45px;
        min-height: 45px;
        font-size: 1rem;
      }

      .countdown-container {
        padding: 14px;
      }

      .card-lottery-name {
        font-size: 1.375rem;
      }

      .card-date {
        font-size: 1.1rem;
      }

      .card-prize {
        font-size: 1.075rem;
      }

      .result-prize-amount {
        font-size: 1rem;
      }

      .result-winning-number {
        font-size: 1.6rem;

      }
    }
  </style>
  <!-- Adding Moment.js for Date Convertion Management -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js"></script>
</head>

<body>
  <!-- Header -->
  <header class="app-header text-white sticky top-0 z-50">
    <div class="px-6 py-5">
      <div class="flex items-center justify-center">
        <div class="flex items-center space-x-3">
          <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRfvxp4SnnjaYyFQDP8d5D660XMvy4nQfc08ScgqFq3IjufpC1OH-ykrQ6v-SkPsuVCt7w&usqp=CAU" style="height: 34px; width: 34px; border-radius: 50%;" alt="">
          <h1 class="text-xl font-bold drop-shadow-lg tracking-wide">Admin - Bhutan State Lotteries</h1>
        </div>
      </div>
    </div>
  </header>

  <main class="px-4 py-6 space-y-8 max-w-md mx-auto">
    <!-- Create New Lottery Button -->
    <div class="text-center">
      <button onclick="openCreateModal()" class="create-btn">
        <i class="fas fa-plus mr-2"></i>
        Create New Lottery
      </button>
    </div>


  <% 
    // Calculate section order
    const now = new Date();
    
    let shouldSwapSections = false;
    
    if (todays && todays.length > 0) {
        // Swap if ANY lottery's draw time has passed (no 2-hour delay)
        const anyDrawPassed = todays.some(lottery => {
            const drawTime = new Date(lottery.drawDate);
            return now > drawTime; // Current time is after draw time
        });
        shouldSwapSections = anyDrawPassed;
    }
  %>

   
    <h1><%= now %></h1>
    <h1><%= todays[0].drawDate %></h1>

    <!-- Conditional section ordering -->
    <% if (!shouldSwapSections) { %>
    <!-- Original order (before draws) -->
    <%- include('partials/todays-results') %>
    <%- include('partials/upcoming-lotteries') %>
    <% } else { %>
    <!-- Swapped order (after draws) -->
    <%- include('partials/upcoming-lotteries') %>
    <%- include('partials/todays-results') %>
    <% } %>
    <%- include('partials/indexScript') %>

    <%- include('partials/past') %>
  </main>

  <!-- Settings Button -->
  <button onclick="goToSettings()" class="settings-btn">
    <i class="fas fa-cog"></i>
  </button>

  <!-- Enhanced Create/Edit Lottery Modal -->
  <div id="lotteryModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 id="modalTitle" class="modal-title">Create New Lottery</h2>
      </div>
      <div class="modal-body">
        <form id="lotteryForm">
          <!-- Lottery Details Section -->
          <div class="form-section">
            <h3 class="form-section-title">
              <i class="fas fa-info-circle"></i>
              Lottery Details
            </h3>

            <div class="form-grid">
              <div class="form-group">
                <label class="form-label">Lottery Name</label>
                <input type="text" id="lotteryName" class="form-input" required placeholder="e.g., Monday Choice Weekly Lottery">
              </div>

              <div class="form-group">
                <label class="form-label">Draw Number</label>
                <input type="number" id="drawNumber" class="form-input" required min="1" placeholder="e.g., 156">
              </div>

              <div class="form-group form-grid-full">
                <label class="form-label">Draw Date & Time</label>
                <input type="datetime-local" id="drawDate" class="form-input" required>
              </div>
            </div>
          </div>

          <!-- Prize Structure Section -->
          <div class="form-section">
            <h3 class="form-section-title">
              <i class="fas fa-trophy"></i>
              Prize Structure
            </h3>

            <div id="prizesContainer">
              <div class="prize-item">
                <div class="prize-rank-display">1st Prize</div>
                <input type="number" placeholder="Amount (₹)" class="prize-amount-input" required min="0">
                <button type="button" class="remove-prize" onclick="removePrize(this)">
                  <i class="fas fa-trash"></i>
                </button>
              </div>
            </div>

            <button type="button" class="add-prize" onclick="addPrize()">
              <i class="fas fa-plus"></i>
              Add Prize
            </button>
          </div>

          <!-- Winners Section -->
          <div class="form-section">
            <h3 class="form-section-title">
              <i class="fas fa-crown"></i>
              Winners (Optional)
            </h3>

            <div id="winnersContainer">
              <!-- Winners will be added dynamically -->
            </div>

            <button type="button" class="add-winner" onclick="addWinner()">
              <i class="fas fa-plus"></i>
              Add Winner
            </button>
          </div>

          <div class="form-actions">
            <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
            <button type="submit" class="btn btn-primary" id="submitBtn">Create Lottery</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Toast Notification -->
  <div id="toast" class="toast"></div>

  <script>
    let currentEditId = null;
    let prizeCounter = 1;
    let winnerCounter = 1;

    // Toggle result expansion
    function toggleResult(resultId) {
      const result = document.getElementById(resultId);
      let arrowId = 'arrow-' + resultId;
      const arrow = document.getElementById(arrowId);

      // Close all other results
      const allResults = document.querySelectorAll('.card-expand');
      const allArrows = document.querySelectorAll('[id^="arrow"]');

      allResults.forEach((el) => {
        if (el.id !== resultId) {
          el.classList.remove('expanded');
          el.classList.add('collapsed');
        }
      });

      allArrows.forEach((el) => {
        if (el.id !== arrowId) {
          el.style.transform = 'rotate(0deg)';
        }
      });

      // Toggle current result
      if (result.classList.contains('collapsed')) {
        result.classList.remove('collapsed');
        result.classList.add('expanded');
        if (arrow) arrow.style.transform = 'rotate(180deg)';
      } else {
        result.classList.remove('expanded');
        result.classList.add('collapsed');
        if (arrow) arrow.style.transform = 'rotate(0deg)';
      }
    }

    // API Functions
    async function fetchAutoComplete() {
      try {
        const response = await fetch('/api/lottery-autocomplete');
        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.message || 'Failed to fetch auto-complete data');
        }

        if (result.success) {
          return result.data;
        } else {
          throw new Error(result.message || 'Auto-complete failed');
        }
      } catch (error) {
        console.error('Auto-complete error:', error);
        showToast('Failed to load auto-complete data: ' + error.message, 'error');
        return null;
      }
    }

    async function createLottery(lotteryData) {
      try {
        const response = await fetch('/api/lottery', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(lotteryData)
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.message || 'Failed to create lottery');
        }

        if (result.success) {
          showToast('Lottery created successfully!', 'success');
          closeModal();
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          throw new Error(result.message || 'Create lottery failed');
        }
      } catch (error) {
        console.error('Create lottery error:', error);
        showToast('Failed to create lottery: ' + error.message, 'error');
      }
    }

    async function updateLottery(id, lotteryData) {
      try {
        const response = await fetch(`/api/lottery/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(lotteryData)
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.message || 'Failed to update lottery');
        }

        if (result.success) {
          showToast('Lottery updated successfully!', 'success');
          closeModal();
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          throw new Error(result.message || 'Update lottery failed');
        }
      } catch (error) {
        console.error('Update lottery error:', error);
        showToast('Failed to update lottery: ' + error.message, 'error');
      }
    }

    async function deleteLottery(id) {
      if (!confirm('Are you sure you want to delete this lottery? This action cannot be undone.')) {
        return;
      }

      try {
        const response = await fetch(`/api/lottery/${id}`, {
          method: 'DELETE'
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.message || 'Failed to delete lottery');
        }

        if (result.success) {
          showToast('Lottery deleted successfully!', 'success');
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          throw new Error(result.message || 'Delete lottery failed');
        }
      } catch (error) {
        console.error('Delete lottery error:', error);
        showToast('Failed to delete lottery: ' + error.message, 'error');
      }
    }

    async function getLotteryById(id) {
      try {
        const response = await fetch(`/api/lottery/${id}`);
        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.message || 'Failed to fetch lottery');
        }

        if (result.success) {
          return result.data;
        } else {
          throw new Error(result.message || 'Fetch lottery failed');
        }
      } catch (error) {
        console.error('Fetch lottery error:', error);
        showToast('Failed to load lottery data: ' + error.message, 'error');
        return null;
      }
    }

    // Modal Functions
    async function openCreateModal() {
      document.getElementById('modalTitle').textContent = 'Create New Lottery';
      document.getElementById('submitBtn').textContent = 'Create Lottery';
      document.getElementById('lotteryForm').reset();
      currentEditId = null;

      // Reset counters
      prizeCounter = 1;
      winnerCounter = 1;

      // Clear and setup default prize
      const prizesContainer = document.getElementById('prizesContainer');
      prizesContainer.innerHTML = `
        <div class="prize-item">
          <div class="prize-rank-display">1st Prize</div>
          <input type="number" placeholder="Amount (₹)" class="prize-amount-input" required min="0">
          <button type="button" class="remove-prize" onclick="removePrize(this)">
            <i class="fas fa-trash"></i>
          </button>
        </div>
      `;

      // Clear winners container
      const winnersContainer = document.getElementById('winnersContainer');
      winnersContainer.innerHTML = '';

      // Load auto-complete data
      const autoCompleteData = await fetchAutoComplete();
      if (autoCompleteData) {
        document.getElementById('lotteryName').value = autoCompleteData.suggestedName || '';
        document.getElementById('drawNumber').value = autoCompleteData.nextDrawNumber || '';

        if (autoCompleteData.suggestedDate) {
          const date = new Date(autoCompleteData.suggestedDate);
          document.getElementById('drawDate').value = date.toISOString().slice(0, 16);
        }
      }

      document.getElementById('lotteryModal').classList.add('show');
    }

    async function editLottery(id) {
      const lotteryData = await getLotteryById(id);
      if (!lotteryData) return;


      document.getElementById('modalTitle').textContent = 'Edit Lottery';
      document.getElementById('submitBtn').textContent = 'Update Lottery';
      currentEditId = id;

      // Fill form with existing data
      document.getElementById('lotteryName').value = lotteryData.name || '';
      document.getElementById('drawNumber').value = lotteryData.drawNumber || '';


      if (lotteryData.drawDate) {
        const utcDate = new Date(lotteryData.drawDate);

        // Convert to IST by adding 5.5 hours (19800 seconds)
        const istOffset = 6 * 60 * 60 * 1000;
        const istDate = new Date(utcDate.getTime() + istOffset);

        // Format for input[type="datetime-local"]
        const formattedIST = istDate.toISOString().slice(0, 16); // YYYY-MM-DDTHH:MM

        document.getElementById('drawDate').value = formattedIST;
      }

      // Fill prizes
      const prizesContainer = document.getElementById('prizesContainer');
      prizesContainer.innerHTML = '';
      prizeCounter = 0;

      if (lotteryData.prizes && lotteryData.prizes.length > 0) {
        lotteryData.prizes.forEach(prize => {
          prizeCounter++;
          const prizeDiv = document.createElement('div');
          prizeDiv.className = 'prize-item';
          prizeDiv.innerHTML = `
            <div class="prize-rank-display">${getRankDisplay(prizeCounter)}</div>
            <input type="number" placeholder="Amount (₹)" class="prize-amount-input" required min="0" value="${prize.amount}">
            <button type="button" class="remove-prize" onclick="removePrize(this)">
              <i class="fas fa-trash"></i>
            </button>
          `;
          prizesContainer.appendChild(prizeDiv);
        });
      } else {
        addPrize();
      }

      // Fill winners
      const winnersContainer = document.getElementById('winnersContainer');
      winnersContainer.innerHTML = '';
      winnerCounter = 0;

      if (lotteryData.winners && lotteryData.winners.length > 0) {
        lotteryData.winners.forEach(winner => {
          winnerCounter++;
          const winnerDiv = document.createElement('div');
          winnerDiv.className = 'winner-item';
          winnerDiv.innerHTML = `
            <div class="winner-rank-display">${getRankDisplay(winnerCounter)}</div>
            <input type="text" placeholder="Ticket Number" class="winner-ticket-input" value="${winner.ticketNumber}">
            <button type="button" class="remove-winner" onclick="removeWinner(this)">
              <i class="fas fa-trash"></i>
            </button>
          `;
          winnersContainer.appendChild(winnerDiv);
        });
      }

      document.getElementById('lotteryModal').classList.add('show');
    }

    function closeModal() {
      document.getElementById('lotteryModal').classList.remove('show');
      currentEditId = null;
    }

    // Prize Management
    function addPrize() {
      prizeCounter++;
      const prizesContainer = document.getElementById('prizesContainer');
      const prizeDiv = document.createElement('div');
      prizeDiv.className = 'prize-item';
      prizeDiv.innerHTML = `
        <div class="prize-rank-display">${getRankDisplay(prizeCounter)}</div>
        <input type="number" placeholder="Amount (₹)" class="prize-amount-input" required min="0">
        <button type="button" class="remove-prize" onclick="removePrize(this)">
          <i class="fas fa-trash"></i>
        </button>
      `;
      prizesContainer.appendChild(prizeDiv);
    }

    function removePrize(button) {
      const prizesContainer = document.getElementById('prizesContainer');
      if (prizesContainer.children.length > 1) {
        button.parentElement.remove();
        updatePrizeRanks();
      } else {
        showToast('At least one prize is required', 'error');
      }
    }

    function updatePrizeRanks() {
      const prizeItems = document.querySelectorAll('.prize-item');
      prizeCounter = 0;
      prizeItems.forEach(item => {
        prizeCounter++;
        item.querySelector('.prize-rank-display').textContent = getRankDisplay(prizeCounter);
      });
    }

    // Winner Management
    function addWinner() {
      winnerCounter++;
      const winnersContainer = document.getElementById('winnersContainer');
      const winnerDiv = document.createElement('div');
      winnerDiv.className = 'winner-item';
      winnerDiv.innerHTML = `
        <div class="winner-rank-display">${getRankDisplay(winnerCounter)}</div>
        <input type="text" placeholder="Ticket Number" class="winner-ticket-input">
        <button type="button" class="remove-winner" onclick="removeWinner(this)">
          <i class="fas fa-trash"></i>
        </button>
      `;
      winnersContainer.appendChild(winnerDiv);
    }

    function removeWinner(button) {
      button.parentElement.remove();
      updateWinnerRanks();
    }

    function updateWinnerRanks() {
      const winnerItems = document.querySelectorAll('.winner-item');
      winnerCounter = 0;
      winnerItems.forEach(item => {
        winnerCounter++;
        item.querySelector('.winner-rank-display').textContent = getRankDisplay(winnerCounter);
      });
    }

    // Helper Functions
    function getRankDisplay(rank) {
      const suffixes = ['th', 'st', 'nd', 'rd'];
      const v = rank % 100;
      return rank + (suffixes[(v - 20) % 10] || suffixes[v] || suffixes[0]) + ' Prize';
    }

    // Form Submission
    document.getElementById('lotteryForm').addEventListener('submit', function(e) {
      e.preventDefault();

      //Date convertion before sending to server
      const selectedDateTimeLocalString = document.getElementById('drawDate').value; // e.g., "2025-07-09T09:00"

      let drawDateUTC;

      if (selectedDateTimeLocalString) {
        // Step 1: Parse the string *as if it's already in Bhutan Time (BTT)*
        const intendedBTTMoment = moment.tz(selectedDateTimeLocalString, 'YYYY-MM-DDTHH:mm', 'Asia/Thimphu');

        // Step 2: Convert this Bhutan Time moment to UTC
        drawDateUTC = intendedBTTMoment.utc().toISOString();
        // Example: "2025-07-09T09:00" BTT → "2025-07-09T03:00:00.000Z" UTC
      } else {
        console.error("Draw Date/Time is required.");
        return; // Stop execution if no input
      }

      const formData = {
        name: document.getElementById('lotteryName').value,
        drawNumber: parseInt(document.getElementById('drawNumber').value),
        // drawDate: new Date(document.getElementById('drawDate').value).toISOString(),
        drawDate: drawDateUTC, // Use the converted UTC date
        prizes: [],
        winners: []
      };

      // Collect prizes
      const prizeItems = document.querySelectorAll('.prize-item');
      prizeItems.forEach((item, index) => {
        const amount = parseInt(item.querySelector('.prize-amount-input').value);
        if (amount) {
          formData.prizes.push({
            rank: index + 1,
            amount: amount
          });
        }
      });

      // Collect winners
      const winnerItems = document.querySelectorAll('.winner-item');
      winnerItems.forEach((item, index) => {
        const ticketNumber = item.querySelector('.winner-ticket-input').value.trim();
        if (ticketNumber) {
          formData.winners.push({
            ticketNumber: ticketNumber,
            prizeRank: index + 1
          });
        }
      });

      // Validate
      if (formData.prizes.length === 0) {
        showToast('Please add at least one prize', 'error');
        return;
      }

      // Submit
      if (currentEditId) {
        updateLottery(currentEditId, formData);
      } else {
        createLottery(formData);
      }
    });

    // Settings Function
    function goToSettings() {
      window.location.href = '/setting';
    }

    // Toast Function
    function showToast(message, type) {
      const toast = document.getElementById('toast');
      toast.textContent = message;
      toast.className = `toast ${type}`;
      toast.classList.add('show');

      setTimeout(() => {
        toast.classList.remove('show');
      }, 3000);
    }

    // Close modal when clicking outside
    document.getElementById('lotteryModal').addEventListener('click', function(e) {
      if (e.target === this) {
        closeModal();
      }
    });

    // Add bounce effect to cards when they appear
    window.addEventListener('load', function() {
      const cards = document.querySelectorAll('.lottery-card');
      cards.forEach((card, index) => {
        setTimeout(() => {
          card.classList.add('bounce-in');
        }, index * 100);
      });
    });
  </script>
</body>

</html>