<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Settings - Bhutan State Lotteries</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
  <style>
    * {
      font-family: 'Poppins', sans-serif;
    }

    * {
      -webkit-tap-highlight-color: transparent;
    }

    body {
      background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
      min-height: 100vh;
    }

    .app-header {
      background: linear-gradient(135deg, #FF6B6B 0%, #6A82FB 50%, #45EBA5 100%);
      background-size: 300% 300%;
      animation: gradientShift 6s ease infinite;
    }

    @keyframes gradientShift {
      0% {
        background-position: 0% 50%;
      }

      50% {
        background-position: 100% 50%;
      }

      100% {
        background-position: 0% 50%;
      }
    }

    .settings-card {
      border-radius: 20px;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
      position: relative;
      overflow: hidden;
      background: white;
      padding: 28px;
      margin-bottom: 24px;
    }

    .settings-card::before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      width: 6px;
      height: 100%;
      background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
      border-radius: 20px 0 0 20px;
    }

    .settings-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
    }

    .section-title {
      background: linear-gradient(135deg, #374151 0%, #4B5563 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      font-weight: 800;
      font-size: 1.5rem;
      margin-bottom: 24px;
      display: flex;
      align-items: center;
    }

    .section-title i {
      margin-right: 12px;
      color: #3B82F6;
      -webkit-text-fill-color: #3B82F6;
    }

    .form-group {
      margin-bottom: 24px;
    }

    .form-label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: #374151;
      font-size: 0.95rem;
    }

    .form-input {
      width: 100%;
      padding: 12px 16px;
      border: 2px solid #E5E7EB;
      border-radius: 8px;
      font-size: 1rem;
      transition: all 0.3s ease;
      font-family: inherit;
    }

    .form-input:focus {
      outline: none;
      border-color: #3B82F6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .form-input.error {
      border-color: #EF4444;
      box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
    }

    .form-input.success {
      border-color: #10B981;
      box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);
    }

    .form-textarea {
      min-height: 100px;
      resize: vertical;
    }

    .btn {
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 0.95rem;
      display: inline-flex;
      align-items: center;
      gap: 8px;
    }

    .btn-primary {
      background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
      color: white;
    }

    .btn-primary:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    }

    .btn-success {
      background: linear-gradient(135deg, #10B981 0%, #059669 100%);
      color: white;
    }

    .btn-success:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
    }

    .btn-secondary {
      background: #E5E7EB;
      color: #374151;
    }

    .btn-secondary:hover {
      background: #D1D5DB;
      transform: translateY(-1px);
    }

    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    .logo-upload-area {
      border: 2px dashed #E5E7EB;
      border-radius: 12px;
      padding: 40px 20px;
      text-align: center;
      transition: all 0.3s ease;
      cursor: pointer;
      background: #F9FAFB;
    }

    .logo-upload-area:hover {
      border-color: #3B82F6;
      background: #EFF6FF;
    }

    .logo-upload-area.dragover {
      border-color: #3B82F6;
      background: #EFF6FF;
      transform: scale(1.02);
    }

    .current-logo {
      max-width: 100px;
      max-height: 100px;
      border-radius: 8px;
      margin: 0 auto 16px;
      display: block;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .upload-icon {
      font-size: 3rem;
      color: #9CA3AF;
      margin-bottom: 16px;
    }

    .upload-text {
      color: #6B7280;
      font-weight: 500;
      margin-bottom: 8px;
    }

    .upload-hint {
      color: #9CA3AF;
      font-size: 0.875rem;
    }

    .password-strength {
      margin-top: 8px;
      padding: 8px 12px;
      border-radius: 6px;
      font-size: 0.875rem;
      font-weight: 500;
      display: none;
    }

    .password-strength.weak {
      background: #FEF2F2;
      color: #DC2626;
      border: 1px solid #FECACA;
      display: block;
    }

    .password-strength.medium {
      background: #FFFBEB;
      color: #D97706;
      border: 1px solid #FED7AA;
      display: block;
    }

    .password-strength.strong {
      background: #F0FDF4;
      color: #059669;
      border: 1px solid #BBF7D0;
      display: block;
    }

    .back-btn {
      position: fixed;
      top: 20px;
      left: 20px;
      width: 56px;
      height: 56px;
      background: linear-gradient(135deg, #6B7280 0%, #4B5563 100%);
      color: white;
      border: none;
      border-radius: 50%;
      font-size: 1.5rem;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 12px rgba(107, 114, 128, 0.3);
      z-index: 1000;
    }

    .back-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(107, 114, 128, 0.4);
    }

    .toast {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 16px 24px;
      border-radius: 8px;
      color: white;
      font-weight: 600;
      z-index: 1100;
      transform: translateX(100%);
      transition: transform 0.3s ease;
      max-width: 400px;
    }

    .toast.show {
      transform: translateX(0);
    }

    .toast.success {
      background: linear-gradient(135deg, #10B981 0%, #059669 100%);
    }

    .toast.error {
      background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
    }

    .toast.info {
      background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
    }

    .loading-spinner {
      display: inline-block;
      width: 16px;
      height: 16px;
      border: 2px solid transparent;
      border-top: 2px solid currentColor;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .form-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
    }

    .form-grid-full {
      grid-column: span 2;
    }

    .bounce-in {
      animation: bounceIn 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    }

    @keyframes bounceIn {
      0% {
        transform: scale(0.3) translateY(50px);
        opacity: 0;
      }

      50% {
        transform: scale(1.05) translateY(-10px);
        opacity: 0.8;
      }

      70% {
        transform: scale(0.95) translateY(0px);
        opacity: 0.9;
      }

      100% {
        transform: scale(1) translateY(0px);
        opacity: 1;
      }
    }

    /* Mobile Responsive Design */
    @media (max-width: 768px) {
      .settings-card {
        padding: 20px;
        margin-bottom: 20px;
      }

      .section-title {
        font-size: 1.25rem;
      }

      .form-grid {
        grid-template-columns: 1fr;
      }

      .form-grid-full {
        grid-column: span 1;
      }

      .logo-upload-area {
        padding: 30px 15px;
      }

      .upload-icon {
        font-size: 2.5rem;
      }

      .btn {
        width: 100%;
        justify-content: center;
        margin-bottom: 12px;
      }

      .toast {
        right: 10px;
        left: 10px;
        max-width: none;
        transform: translateY(-100%);
      }

      .toast.show {
        transform: translateY(0);
      }
    }
  </style>
</head>

<body>
  <!-- Header -->
  <header class="app-header text-white sticky top-0 z-50">
    <div class="px-6 py-5">
      <div class="flex items-center justify-center">
        <div class="flex items-center space-x-3">
          <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRfvxp4SnnjaYyFQDP8d5D660XMvy4nQfc08ScgqFq3IjufpC1OH-ykrQ6v-SkPsuVCt7w&usqp=CAU" 
               style="height: 34px; width: 34px; border-radius: 50%;" alt="Logo">
          <h1 class="text-xl font-bold drop-shadow-lg tracking-wide">Settings - Bhutan State Lotteries</h1>
        </div>
      </div>
    </div>
  </header>

  <!-- Back Button -->
  <button onclick="goBack()" class="back-btn">
    <i class="fas fa-arrow-left"></i>
  </button>

  <main class="px-4 py-6 space-y-8 max-w-4xl mx-auto">
    
    <!-- Website Settings Section -->
    <section class="settings-card">
      <h2 class="section-title">
        <i class="fas fa-globe"></i>
        Website Settings
      </h2>

      <form id="websiteForm">
        <!-- Logo Upload -->
        <div class="form-group">
          <label class="form-label">
            <i class="fas fa-image mr-2"></i>
            Website Logo
          </label>
          <div class="logo-upload-area" onclick="document.getElementById('logoInput').click()">
            <img id="currentLogo" class="current-logo" style="display: none;" alt="Current Logo">
            <div id="uploadPlaceholder">
              <i class="fas fa-cloud-upload-alt upload-icon"></i>
              <div class="upload-text">Click to upload or drag and drop</div>
              <div class="upload-hint">PNG, JPG, SVG up to 2MB</div>
            </div>
            <input type="file" id="logoInput" accept="image/*" style="display: none;">
          </div>
        </div>

        <!-- SEO Settings -->
        <div class="form-grid">
          <div class="form-group">
            <label class="form-label">
              <i class="fas fa-tag mr-2"></i>
              SEO Title
            </label>
            <input type="text" id="seoTitle" class="form-input" placeholder="Enter SEO title" maxlength="60">
            <div class="text-sm text-gray-500 mt-1" id="titleCounter">0/60 characters</div>
          </div>

          <div class="form-group">
            <label class="form-label">
              <i class="fas fa-link mr-2"></i>
              Website URL
            </label>
            <input type="url" id="websiteUrl" class="form-input" placeholder="https://example.com" readonly>
          </div>

          <div class="form-group form-grid-full">
            <label class="form-label">
              <i class="fas fa-file-alt mr-2"></i>
              Meta Description
            </label>
            <textarea id="metaDescription" class="form-input form-textarea" placeholder="Enter meta description for search engines" maxlength="160"></textarea>
            <div class="text-sm text-gray-500 mt-1" id="descCounter">0/160 characters</div>
          </div>
        </div>

        <div class="flex justify-end">
          <button type="submit" class="btn btn-primary" id="saveWebsiteBtn">
            <i class="fas fa-save"></i>
            Save Website Settings
          </button>
        </div>
      </form>
    </section>

    <!-- Admin Account Settings Section -->
    <section class="settings-card">
      <h2 class="section-title">
        <i class="fas fa-user-shield"></i>
        Admin Account Settings
      </h2>

      <form id="adminForm">
        <div class="form-grid">
          <div class="form-group">
            <label class="form-label">
              <i class="fas fa-user mr-2"></i>
              Admin Name
            </label>
            <input type="text" id="adminName" class="form-input" placeholder="Enter admin name" required>
          </div>

          <div class="form-group">
            <label class="form-label">
              <i class="fas fa-envelope mr-2"></i>
              Admin Email
            </label>
            <input type="email" id="adminEmail" class="form-input" placeholder="Enter admin email" required>
          </div>

          <div class="form-group">
            <label class="form-label">
              <i class="fas fa-lock mr-2"></i>
              Current Password
            </label>
            <input type="password" id="currentPassword" class="form-input" placeholder="Enter current password">
          </div>

          <div class="form-group">
            <label class="form-label">
              <i class="fas fa-key mr-2"></i>
              New Password
            </label>
            <input type="password" id="newPassword" class="form-input" placeholder="Enter new password">
            <div class="password-strength" id="passwordStrength"></div>
          </div>

          <div class="form-group form-grid-full">
            <label class="form-label">
              <i class="fas fa-check-circle mr-2"></i>
              Confirm New Password
            </label>
            <input type="password" id="confirmPassword" class="form-input" placeholder="Confirm new password">
          </div>
        </div>

        <div class="flex flex-wrap justify-end" style="column-gap: 16px;">
          <button type="button" class="btn btn-secondary" onclick="resetAdminForm()">
            <i class="fas fa-undo"></i>
            Reset
          </button>
          <button type="submit" class="btn btn-success" id="saveAdminBtn">
            <i class="fas fa-shield-alt"></i>
            Update Admin Settings
          </button>
        </div>
      </form>
    </section>

  </main>

  <!-- Toast Notification -->
  <div id="toast" class="toast"></div>

  <script>
    // Global variables
    let currentWebsiteSettings = {};
    let currentAdminSettings = {};

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
      initializePage();
      setupEventListeners();
      loadWebsiteSettings();
      loadAdminSettings();
    });

    // Initialize page animations
    function initializePage() {
      const cards = document.querySelectorAll('.settings-card');
      cards.forEach((card, index) => {
        setTimeout(() => {
          card.classList.add('bounce-in');
        }, index * 200);
      });
    }

    // Setup event listeners
    function setupEventListeners() {
      // Logo upload
      const logoInput = document.getElementById('logoInput');
      const uploadArea = document.querySelector('.logo-upload-area');

      logoInput.addEventListener('change', handleLogoUpload);
      
      // Drag and drop
      uploadArea.addEventListener('dragover', handleDragOver);
      uploadArea.addEventListener('dragleave', handleDragLeave);
      uploadArea.addEventListener('drop', handleDrop);

      // Form submissions
      document.getElementById('websiteForm').addEventListener('submit', handleWebsiteSubmit);
      document.getElementById('adminForm').addEventListener('submit', handleAdminSubmit);

      // Character counters
      document.getElementById('seoTitle').addEventListener('input', updateTitleCounter);
      document.getElementById('metaDescription').addEventListener('input', updateDescCounter);

      // Password strength
      document.getElementById('newPassword').addEventListener('input', checkPasswordStrength);
      document.getElementById('confirmPassword').addEventListener('input', checkPasswordMatch);
    }

    // API Functions - Website Settings
    async function loadWebsiteSettings() {
      try {
        const response = await fetch('/api/settings/website');
        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.message || 'Failed to load website settings');
        }

        if (result.success) {
          currentWebsiteSettings = result.data;
          populateWebsiteForm(result.data);
        } else {
          throw new Error(result.message || 'Failed to load website settings');
        }
      } catch (error) {
        console.error('Load website settings error:', error);
        showToast('Failed to load website settings: ' + error.message, 'error');
      }
    }

    async function saveWebsiteSettings(formData) {
      try {
        const response = await fetch('/api/settings/website', {
          method: 'POST',
          body: formData
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.message || 'Failed to save website settings');
        }

        if (result.success) {
          showToast('Website settings saved successfully!', 'success');
          currentWebsiteSettings = result.data;
          return true;
        } else {
          throw new Error(result.message || 'Failed to save website settings');
        }
      } catch (error) {
        console.error('Save website settings error:', error);
        showToast('Failed to save website settings: ' + error.message, 'error');
        return false;
      }
    }

    // API Functions - Admin Settings
    async function loadAdminSettings() {
      try {
        const response = await fetch('/api/settings/admin');
        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.message || 'Failed to load admin settings');
        }

        if (result.success) {
          currentAdminSettings = result.data;
          populateAdminForm(result.data);
        } else {
          throw new Error(result.message || 'Failed to load admin settings');
        }
      } catch (error) {
        console.error('Load admin settings error:', error);
        showToast('Failed to load admin settings: ' + error.message, 'error');
      }
    }

    async function saveAdminSettings(adminData) {
      try {
        const response = await fetch('/api/settings/admin', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(adminData)
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.message || 'Failed to save admin settings');
        }

        if (result.success) {
          showToast('Admin settings updated successfully!', 'success');
          currentAdminSettings = result.data;
          return true;
        } else {
          throw new Error(result.message || 'Failed to save admin settings');
        }
      } catch (error) {
        console.error('Save admin settings error:', error);
        showToast('Failed to save admin settings: ' + error.message, 'error');
        return false;
      }
    }

    // Form population functions
    function populateWebsiteForm(data) {
      document.getElementById('seoTitle').value = data.seoTitle || '';
      document.getElementById('websiteUrl').value = data.websiteUrl || '';
      document.getElementById('metaDescription').value = data.metaDescription || '';
      
      if (data.logoUrl) {
        document.getElementById('currentLogo').src = data.logoUrl;
        document.getElementById('currentLogo').style.display = 'block';
        document.getElementById('uploadPlaceholder').style.display = 'none';
      }

      updateTitleCounter();
      updateDescCounter();
    }

    function populateAdminForm(data) {
      document.getElementById('adminName').value = data.name || '';
      document.getElementById('adminEmail').value = data.email || '';
      // Note: Never populate password fields for security
    }

    // Logo upload handlers
    function handleLogoUpload(event) {
      const file = event.target.files[0];
      if (file) {
        validateAndPreviewLogo(file);
      }
    }

    function handleDragOver(event) {
      event.preventDefault();
      event.currentTarget.classList.add('dragover');
    }

    function handleDragLeave(event) {
      event.preventDefault();
      event.currentTarget.classList.remove('dragover');
    }

    function handleDrop(event) {
      event.preventDefault();
      event.currentTarget.classList.remove('dragover');
      
      const files = event.dataTransfer.files;
      if (files.length > 0) {
        validateAndPreviewLogo(files[0]);
      }
    }

    function validateAndPreviewLogo(file) {
      // Validate file type
      if (!file.type.startsWith('image/')) {
        showToast('Please select a valid image file', 'error');
        return;
      }

      // Validate file size (2MB)
      if (file.size > 2 * 1024 * 1024) {
        showToast('Image file size should be less than 2MB', 'error');
        return;
      }

      // Preview image
      const reader = new FileReader();
      reader.onload = function(e) {
        document.getElementById('currentLogo').src = e.target.result;
        document.getElementById('currentLogo').style.display = 'block';
        document.getElementById('uploadPlaceholder').style.display = 'none';
      };
      reader.readAsDataURL(file);
    }

    // Form submission handlers
    async function handleWebsiteSubmit(event) {
      event.preventDefault();
      
      const submitBtn = document.getElementById('saveWebsiteBtn');
      const originalText = submitBtn.innerHTML;
      
      // Show loading state
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<div class="loading-spinner"></div> Saving...';

      try {
        const formData = new FormData();
        formData.append('seoTitle', document.getElementById('seoTitle').value);
        formData.append('websiteUrl', document.getElementById('websiteUrl').value);
        formData.append('metaDescription', document.getElementById('metaDescription').value);
        
        const logoFile = document.getElementById('logoInput').files[0];
        if (logoFile) {
          formData.append('logo', logoFile);
        }

        const success = await saveWebsiteSettings(formData);
        
        if (success) {
          // Reset form state
          document.getElementById('logoInput').value = '';
        }
      } finally {
        // Restore button state
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalText;
      }
    }

    async function handleAdminSubmit(event) {
      event.preventDefault();
      
      const submitBtn = document.getElementById('saveAdminBtn');
      const originalText = submitBtn.innerHTML;
      
      // Show loading state
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<div class="loading-spinner"></div> Updating...';

      try {
        const adminData = {
          name: document.getElementById('adminName').value,
          email: document.getElementById('adminEmail').value
        };

        const currentPassword = document.getElementById('currentPassword').value;
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;

        // Add password data if provided
        if (currentPassword && newPassword && confirmPassword) {
          if (newPassword !== confirmPassword) {
            showToast('New passwords do not match', 'error');
            return;
          }

          adminData.currentPassword = currentPassword;
          adminData.newPassword = newPassword;
        }

        const success = await saveAdminSettings(adminData);
        
        if (success) {
          // Clear password fields
          document.getElementById('currentPassword').value = '';
          document.getElementById('newPassword').value = '';
          document.getElementById('confirmPassword').value = '';
          document.getElementById('passwordStrength').style.display = 'none';
        }
      } finally {
        // Restore button state
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalText;
      }
    }

    // Character counter functions
    function updateTitleCounter() {
      const input = document.getElementById('seoTitle');
      const counter = document.getElementById('titleCounter');
      const length = input.value.length;
      counter.textContent = `${length}/60 characters`;
      
      if (length > 60) {
        counter.style.color = '#EF4444';
        input.classList.add('error');
      } else {
        counter.style.color = '#6B7280';
        input.classList.remove('error');
      }
    }

    function updateDescCounter() {
      const input = document.getElementById('metaDescription');
      const counter = document.getElementById('descCounter');
      const length = input.value.length;
      counter.textContent = `${length}/160 characters`;
      
      if (length > 160) {
        counter.style.color = '#EF4444';
        input.classList.add('error');
      } else {
        counter.style.color = '#6B7280';
        input.classList.remove('error');
      }
    }

    // Password strength checker
    function checkPasswordStrength() {
      const password = document.getElementById('newPassword').value;
      const strengthDiv = document.getElementById('passwordStrength');
      
      if (!password) {
        strengthDiv.style.display = 'none';
        return;
      }

      let strength = 0;
      let feedback = '';

      // Check length
      if (password.length >= 8) strength++;
      // Check for lowercase
      if (/[a-z]/.test(password)) strength++;
      // Check for uppercase
      if (/[A-Z]/.test(password)) strength++;
      // Check for numbers
      if (/\d/.test(password)) strength++;
      // Check for special characters
      if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) strength++;

      strengthDiv.className = 'password-strength';
      
      if (strength < 3) {
        strengthDiv.classList.add('weak');
        feedback = 'Weak password. Use 8+ characters with mixed case, numbers, and symbols.';
      } else if (strength < 5) {
        strengthDiv.classList.add('medium');
        feedback = 'Medium strength. Consider adding more character types.';
      } else {
        strengthDiv.classList.add('strong');
        feedback = 'Strong password!';
      }

      strengthDiv.textContent = feedback;
    }

    function checkPasswordMatch() {
      const newPassword = document.getElementById('newPassword').value;
      const confirmPassword = document.getElementById('confirmPassword').value;
      const confirmInput = document.getElementById('confirmPassword');
      
      if (confirmPassword && newPassword !== confirmPassword) {
        confirmInput.classList.add('error');
        confirmInput.classList.remove('success');
      } else if (confirmPassword && newPassword === confirmPassword) {
        confirmInput.classList.add('success');
        confirmInput.classList.remove('error');
      } else {
        confirmInput.classList.remove('error', 'success');
      }
    }

    // Utility functions
    function resetAdminForm() {
      document.getElementById('adminForm').reset();
      populateAdminForm(currentAdminSettings);
      document.getElementById('passwordStrength').style.display = 'none';
      
      // Remove validation classes
      const inputs = document.querySelectorAll('#adminForm .form-input');
      inputs.forEach(input => {
        input.classList.remove('error', 'success');
      });
    }

    function goBack() {
      window.history.back();
    }

    function showToast(message, type) {
      const toast = document.getElementById('toast');
      toast.textContent = message;
      toast.className = `toast ${type}`;
      toast.classList.add('show');

      setTimeout(() => {
        toast.classList.remove('show');
      }, 4000);
    }
  </script>
</body>

</html>