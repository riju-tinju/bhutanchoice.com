<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="robots" content="noindex">
  <title>Booking Management - Bhutan State Lotteries</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>



<!-- Booking Management Page -->
<div class="booking-container">
  <!-- Header Section -->
  <div class="booking-header">
    <h1 class="page-title">
      <i class="fas fa-clipboard-list"></i>
      Booking Management
    </h1>
    <p class="page-subtitle">View and manage all lottery ticket bookings</p>
  </div>

  <!-- Filters Section -->
  <div class="filters-section">
    <div class="filters-header">
      <h3><i class="fas fa-filter"></i> Search & Filters</h3>
      <button type="button" class="btn btn-secondary btn-sm" id="resetFilters">
        <i class="fas fa-undo"></i>
        Reset All
      </button>
    </div>
    
    <div class="filters-grid">
      <!-- Search Row - Full Width -->
      <div class="search-row">
        <div class="filter-group search-group">
          <label class="filter-label">Search Customer</label>
          <div class="search-input-wrapper">
            <i class="fas fa-search search-icon"></i>
            <input type="text" id="customerSearch" class="search-input" 
                   placeholder="Search by customer name or phone...">
            <button type="button" class="search-clear" id="clearSearch" style="display: none;">
              <i class="fas fa-times"></i>
            </button>
          </div>
        </div>
        
        <div class="filter-group search-btn-group">
          <button type="button" class="btn btn-primary search-btn" id="searchBtn">
            <i class="fas fa-search"></i>
            <span class="btn-text">Search</span>
          </button>
        </div>
      </div>
      
      <!-- Date Range Row -->
      <div class="date-row">
        <div class="filter-group">
          <label class="filter-label">From Date & Time</label>
          <input type="datetime-local" id="fromDateTime" class="filter-input">
        </div>
        
        <div class="filter-group">
          <label class="filter-label">To Date & Time</label>
          <input type="datetime-local" id="toDateTime" class="filter-input">
        </div>
      </div>
      
      <!-- Filter Dropdowns Row -->
      <div class="dropdowns-row">
        <div class="filter-group">
          <label class="filter-label">Child Lottery</label>
          <select id="childLotteryFilter" class="filter-select">
            <option value="">All Child Lotteries</option>
            <!-- Options populated from backend -->
          </select>
        </div>
        
        <div class="filter-group">
          <label class="filter-label">Agent</label>
          <select id="agentFilter" class="filter-select">
            <option value="">All Agents</option>
            <!-- Options populated from backend -->
          </select>
        </div>
        
        <div class="filter-group">
          <label class="filter-label">Booking Status</label>
          <select id="statusFilter" class="filter-select">
            <option value="">All Status</option>
            <option value="active">Active</option>
            <option value="cancelled">Cancelled</option>
          </select>
        </div>
      </div>
      
      <!-- Sort and Items Row -->
      <div class="controls-row">
        <div class="filter-group">
          <label class="filter-label">Sort By</label>
          <select id="sortFilter" class="filter-select">
            <option value="booking.date_desc">Booking Date (Newest)</option>
            <option value="booking.date_asc">Booking Date (Oldest)</option>
            <option value="agent.name_asc">Agent Name (A-Z)</option>
            <option value="agent.name_desc">Agent Name (Z-A)</option>
            <option value="financial.totalAmount_desc">Amount (High-Low)</option>
            <option value="financial.totalAmount_asc">Amount (Low-High)</option>
            <option value="financial.quantity_desc">Quantity (High-Low)</option>
            <option value="financial.quantity_asc">Quantity (Low-High)</option>
          </select>
        </div>

        <div class="filter-group">
          <label class="filter-label">winner</label>
          <select id="winnerFilter" class="filter-select">
            <option value="booking.date_desc">All</option>
            <option value="booking.date_asc">winners</option>
            <option value="booking.date_asc">non winners</option>
          </select>
        </div>
        
        <div class="filter-group">
          <label class="filter-label">Items Per Page</label>
          <select id="itemsPerPageFilter" class="filter-select">
            <option value="10">10 per page</option>
            <option value="25" selected>25 per page</option>
            <option value="50">50 per page</option>
            <option value="100">100 per page</option>
          </select>
        </div>
      </div>
    </div>
  </div>

  <!-- KPI Cards Section -->
  <div class="kpi-section" id="kpiSection" style="display: none;">
    <div class="kpi-cards">
      <div class="kpi-card kpi-primary">
        <div class="kpi-icon">
          <i class="fas fa-ticket-alt"></i>
        </div>
        <div class="kpi-content">
          <div class="kpi-value" id="kpiTotalTickets">0</div>
          <div class="kpi-label">Total Bookings</div>
        </div>
      </div>
      
      <div class="kpi-card kpi-success">
        <div class="kpi-icon">
          <i class="fas fa-coins"></i>
        </div>
        <div class="kpi-content">
          <div class="kpi-value" id="kpiTotalRevenue">Nu0</div>
          <div class="kpi-label">Total Revenue</div>
        </div>
      </div>
      
      <div class="kpi-card kpi-info">
        <div class="kpi-icon">
          <i class="fas fa-list-ol"></i>
        </div>
        <div class="kpi-content">
          <div class="kpi-value" id="kpiTotalTicketNumbers">0</div>
          <div class="kpi-label">Total Tickets</div>
        </div>
      </div>
      
      <div class="kpi-card kpi-warning">
        <div class="kpi-icon">
          <i class="fas fa-trophy"></i>
        </div>
        <div class="kpi-content">
          <div class="kpi-value" id="kpiTotalWonNumbers">0</div>
          <div class="kpi-label">Won Tickets</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Loading State -->
  <div class="loading-container" id="loadingContainer">
    <div class="loading-spinner"></div>
    <p>Loading bookings...</p>
  </div>

  <!-- Bookings Table -->
  <div class="bookings-container" id="bookingsContainer" style="display: none;">
    <div class="table-container">
      <table class="bookings-table" id="bookingsTable">
        <thead>
          <tr>
            <th class="expand-col"></th>
            <th class="booking-id-col">Booking ID</th>
            <th class="customer-col">Customer</th>
            <th class="agent-col">Agent</th>
            <th class="quantity-col">Qty</th>
            <th class="amount-col">Amount</th>
            <th class="status-col">Status</th>
            <th class="date-col">Booking Date</th>
            <th class="actions-col">Actions</th>
          </tr>
        </thead>
        <tbody id="bookingsTableBody">
          <!-- Booking rows will be inserted here -->
        </tbody>
      </table>
    </div>
  </div>

  <!-- Empty State -->
  <div class="empty-state" id="emptyState" style="display: none;">
    <i class="fas fa-inbox"></i>
    <h3>No Bookings Found</h3>
    <p>No bookings match your current search and filter criteria.</p>
    <button type="button" class="btn btn-primary" onclick="clearAllFilters()">
      Clear All Filters
    </button>
  </div>

  <!-- Pagination -->
  <div class="pagination-container" id="paginationContainer" style="display: none;">
    <div class="pagination-info">
      Showing <span id="startItem">0</span> to <span id="endItem">0</span> of <span id="totalItems">0</span> bookings
    </div>
    <div class="pagination-controls">
      <button type="button" class="btn btn-secondary btn-sm" id="prevPageBtn" disabled>
        <i class="fas fa-chevron-left"></i>
        Previous
      </button>
      <span class="page-info">
        Page <span id="currentPage">1</span> of <span id="totalPages">1</span>
      </span>
      <button type="button" class="btn btn-secondary btn-sm" id="nextPageBtn" disabled>
        Next
        <i class="fas fa-chevron-right"></i>
      </button>
    </div>
  </div>
</div>

<!-- Booking Details Modal -->
<div id="bookingModal" class="modal">
  <div class="modal-content modal-lg">
    <div class="modal-header">
      <h2 class="modal-title">Booking Details</h2>
      <button type="button" class="modal-close" onclick="closeBookingModal()">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body">
      <div id="bookingDetails">
        <!-- Booking details will be populated here -->
      </div>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-secondary" onclick="closeBookingModal()">Close</button>
      <button type="button" class="btn btn-primary" id="updateBookingBtn">
        <i class="fas fa-edit"></i>
        Update Status
      </button>
    </div>
  </div>
</div>

<!-- Update Status Modal -->
<div id="statusModal" class="modal">
  <div class="modal-content modal-sm">
    <div class="modal-header">
      <h2 class="modal-title">Update Booking Status</h2>
      <button type="button" class="modal-close" onclick="closeStatusModal()">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body">
      <form id="statusForm">
        <input type="hidden" id="statusBookingId">
        
        <div class="form-group">
          <label class="form-label">Booking Status</label>
          <select id="newBookingStatus" class="form-select">
            <option value="active">Active</option>
            <option value="cancelled">Cancelled</option>
          </select>
        </div>
      </form>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-secondary" onclick="closeStatusModal()">Cancel</button>
      <button type="button" class="btn btn-primary" id="saveStatusBtn">
        <span class="btn-text">
          <i class="fas fa-save"></i>
          Update Status
        </span>
        <span class="btn-spinner" style="display: none;">
          <i class="fas fa-spinner fa-spin"></i>
          Updating...
        </span>
      </button>
    </div>
  </div>
</div>

<!-- Toast Notification -->
<div id="bookingToast" class="toast"></div>

<%- include('../../partials/Footer') %>

<style>
/* Mobile-First Responsive Base Styles */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  line-height: 1.6;
  color: #1f2937;
  overflow-x: hidden;
  background: #f8fafc;
}

.booking-container {
  padding: 8px;
  max-width: 100%;
  margin: 0 auto;
  min-height: 100vh;
}

/* Header - Same styling */
.booking-header {
  text-align: center;
  margin-bottom: 16px;
  padding: 16px 12px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 12px;
  color: white;
}

.page-title {
  font-size: 1.25rem;
  margin-bottom: 6px;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  flex-wrap: wrap;
  line-height: 1.2;
}

.page-subtitle {
  font-size: 0.8rem;
  opacity: 0.9;
  line-height: 1.3;
}

/* Filters Section - FIXED RESPONSIVE LAYOUT */
.filters-section {
  background: white;
  border-radius: 12px;
  padding: 16px;
  margin-bottom: 16px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.filters-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
  padding-bottom: 8px;
  border-bottom: 2px solid #e2e8f0;
}

.filters-header h3 {
  display: flex;
  align-items: center;
  gap: 8px;
  color: #1e293b;
  font-size: 1.1rem;
}

/* RESPONSIVE FILTERS GRID - MOBILE FIRST - FIXED OVERFLOW ISSUES */
.filters-grid {
  display: flex;
  flex-direction: column;
  gap: 16px;
  width: 100%;
  max-width: 100%;
  overflow: hidden; /* Prevent container overflow */
}

/* Search Row - Mobile: Stack vertically - FIXED */
.search-row {
  display: flex;
  flex-direction: column;
  gap: 12px;
  width: 100%;
  min-width: 0; /* Critical for preventing overflow */
  box-sizing: border-box;
}

.search-group {
  flex: 1;
  min-width: 0; /* Critical for flex child overflow prevention */
  width: 100%;
  max-width: 100%;
  box-sizing: border-box;
}

.search-btn-group {
  display: flex;
  align-items: start;
  width: 100%;
  min-width: 0;
  box-sizing: border-box;
}

/* Date Row - Mobile: Stack vertically - FIXED */
.date-row {
  display: flex;
  flex-direction: column;
  gap: 12px;
  width: 100%;
  min-width: 0;
  box-sizing: border-box;
}

/* Dropdowns Row - Mobile: Stack vertically - FIXED */
.dropdowns-row {
  display: flex;
  flex-direction: column;
  gap: 12px;
  width: 100%;
  min-width: 0;
  box-sizing: border-box;
}

/* Controls Row - Mobile: Stack vertically - FIXED */
.controls-row {
  display: flex;
  flex-direction: column;
  gap: 12px;
  width: 100%;
  min-width: 0;
  box-sizing: border-box;
}

.filter-group {
  display: flex;
  flex-direction: column;
  gap: 4px;
  min-width: 0; /* Critical - prevents flex child overflow */
  width: 100%;
  max-width: 100%;
  box-sizing: border-box;
  overflow: hidden; /* Prevent content overflow */
}

.filter-label {
  font-size: 0.85rem;
  font-weight: 600;
  color: #374151;
}

.filter-input,
.filter-select {
  padding: 8px 12px;
  border: 2px solid #e5e7eb;
  border-radius: 6px;
  font-size: 14px;
  background: white;
  min-height: 36px;
  transition: all 0.2s ease;
  width: 100%;
  min-width: 0; /* Prevent overflow */
}

.filter-input:focus,
.filter-select:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.search-input-wrapper {
  position: relative;
  width: 100%;
  min-width: 0; /* Critical for preventing overflow */
  max-width: 100%;
  box-sizing: border-box;
  overflow: hidden; /* Prevent wrapper overflow */
}

.search-input {
  width: 100%;
  max-width: 100%;
  padding: 8px 12px 8px 36px;
  padding-right: 36px;
  border: 2px solid #e5e7eb;
  border-radius: 6px;
  font-size: 14px;
  background: white;
  min-height: 36px;
  min-width: 0; /* Critical - prevents input overflow */
  box-sizing: border-box;
  overflow: hidden; /* Prevent text overflow */
  text-overflow: ellipsis; /* Show ellipsis for long text */
}

.search-icon {
  position: absolute;
  left: 10px;
  top: 50%;
  transform: translateY(-50%);
  color: #6b7280;
  font-size: 0.9rem;
}

.search-clear {
  position: absolute;
  right: 6px;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  color: #6b7280;
  cursor: pointer;
  padding: 6px;
  border-radius: 50%;
  min-width: 28px;
  min-height: 28px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.search-btn {
  width: 100%;
  white-space: nowrap;
}

/* KPI Section */
.kpi-section {
  margin-bottom: 16px;
}

.kpi-cards {
  display: grid;
  grid-template-columns: 1fr;
  gap: 12px;
}

.kpi-card {
  background: white;
  border-radius: 12px;
  padding: 16px;
  display: flex;
  align-items: center;
  gap: 16px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  transition: all 0.2s ease;
}

.kpi-card:hover {
  box-shadow: 0 4px 16px rgba(0,0,0,0.15);
}

.kpi-icon {
  width: 48px;
  height: 48px;
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 1.2rem;
  flex-shrink: 0;
}

.kpi-card.kpi-primary .kpi-icon {
  background: linear-gradient(135deg, #3b82f6, #1d4ed8);
}

.kpi-card.kpi-success .kpi-icon {
  background: linear-gradient(135deg, #10b981, #059669);
}

.kpi-card.kpi-info .kpi-icon {
  background: linear-gradient(135deg, #8b5cf6, #7c3aed);
}

.kpi-card.kpi-warning .kpi-icon {
  background: linear-gradient(135deg, #f59e0b, #d97706);
}

.kpi-content {
  flex: 1;
}

.kpi-value {
  font-size: 1.5rem;
  font-weight: 700;
  color: #1e293b;
  margin-bottom: 2px;
}

.kpi-label {
  font-size: 0.85rem;
  color: #64748b;
  font-weight: 500;
}

/* Table Container */
.table-container {
  background: white;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  overflow: hidden;
}

.bookings-table {
  width: 100%;
  border-collapse: collapse;
}

.bookings-table th {
  background: #f8fafc;
  padding: 12px 8px;
  text-align: left;
  font-weight: 600;
  color: #374151;
  border-bottom: 2px solid #e5e7eb;
  font-size: 0.8rem;
  white-space: nowrap;
}

.bookings-table td {
  padding: 12px 8px;
  border-bottom: 1px solid #e5e7eb;
  font-size: 0.8rem;
  vertical-align: middle;
}

/* Column Widths */
.expand-col { width: 40px; }
.booking-id-col { width: 120px; }
.customer-col { width: 180px; }
.agent-col { width: 140px; }
.quantity-col { width: 60px; }
.amount-col { width: 100px; }
.status-col { width: 100px; }
.date-col { width: 140px; }
.actions-col { width: 80px; }

/* Table Row Styles */
.booking-row {
  cursor: pointer;
  transition: all 0.2s ease;
}

.booking-row:hover {
  background: #f8fafc;
}

.booking-row.expanded {
  background: #eff6ff;
  border-left: 4px solid #3b82f6;
}

.expand-btn {
  background: none;
  border: none;
  cursor: pointer;
  padding: 4px;
  border-radius: 4px;
  color: #6b7280;
  transition: all 0.2s ease;
  width: 24px;
  height: 24px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.expand-btn:hover {
  background: #f3f4f6;
  color: #374151;
}

.expand-btn.expanded {
  color: #3b82f6;
  transform: rotate(90deg);
}

/* Customer Info */
.customer-info {
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.customer-name {
  font-weight: 600;
  color: #1e293b;
  line-height: 1.2;
}

.customer-phone {
  color: #64748b;
  font-size: 0.75rem;
}

/* Agent Info */
.agent-name {
  font-weight: 600;
  color: #1e293b;
}

/* Status Badges */
.status-badge {
  padding: 4px 8px;
  border-radius: 12px;
  font-size: 0.7rem;
  font-weight: 600;
  display: inline-flex;
  align-items: center;
  gap: 4px;
  white-space: nowrap;
}

.status-badge.active {
  background: #dcfce7;
  color: #166534;
}

.status-badge.cancelled {
  background: #fef2f2;
  color: #991b1b;
}

.status-dot {
  width: 6px;
  height: 6px;
  border-radius: 50%;
}

.status-badge.active .status-dot {
  background: #22c55e;
}

.status-badge.cancelled .status-dot {
  background: #ef4444;
}

/* Amount Display */
.amount-display {
  font-weight: 700;
  color: #059669;
}

/* Date Display */
.date-display {
  color: #64748b;
  font-size: 0.75rem;
  white-space: nowrap;
}

/* Action Buttons */
.table-actions {
  display: flex;
  gap: 4px;
}

.btn-icon {
  padding: 6px;
  min-width: 28px;
  min-height: 28px;
  font-size: 0.75rem;
}

/* Child Tickets Row */
.child-tickets-row {
  display: none;
}

.child-tickets-row.show {
  display: table-row;
}

.child-tickets-cell {
  background: #f8fafc;
  border-left: 4px solid #3b82f6;
  padding: 0;
}

.child-tickets-container {
  padding: 16px;
  animation: slideDown 0.3s ease;
}

.child-tickets-title {
  font-weight: 600;
  color: #374151;
  margin-bottom: 12px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.child-tickets-grid {
  display: grid;
  gap: 8px;
  grid-template-columns: 1fr;
}

.child-ticket-item {
  background: white;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  padding: 12px;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
  gap: 8px;
  font-size: 0.8rem;
}

.child-ticket-detail {
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.child-ticket-label {
  font-size: 0.7rem;
  color: #6b7280;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.025em;
}

.child-ticket-value {
  font-weight: 600;
  color: #1e293b;
}

.child-ticket-number {
  font-family: monospace;
  background: #f1f5f9;
  padding: 4px 8px;
  border-radius: 4px;
  color: #1e40af;
}

/* Buttons */
.btn {
  padding: 8px 12px;
  border: none;
  border-radius: 6px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 6px;
  font-size: 0.8rem;
  min-height: 32px;
  text-align: center;
  word-break: break-word;
}

.btn-sm {
  padding: 6px 10px;
  font-size: 0.75rem;
  min-height: 28px;
}

.btn-primary {
  background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
  color: white;
}

.btn-secondary {
  background: #6b7280;
  color: white;
}

.btn-success {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  color: white;
}

.btn-warning {
  background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
  color: white;
}

.btn:hover:not(:disabled) {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none;
}

.btn.loading .btn-text {
  display: none;
}

.btn.loading .btn-spinner {
  display: flex;
  align-items: center;
  gap: 6px;
}

.btn-spinner {
  display: none;
}

.btn-text {
  display: flex;
  align-items: center;
  gap: 6px;
}

/* Loading, Empty State, Pagination - Same as before */
.loading-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 40px 20px;
  color: #6b7280;
  background: white;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.loading-spinner {
  width: 32px;
  height: 32px;
  border: 3px solid #e5e7eb;
  border-top: 3px solid #3b82f6;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 16px;
}

.empty-state {
  text-align: center;
  padding: 40px 20px;
  background: white;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.empty-state i {
  font-size: 3rem;
  color: #9ca3af;
  margin-bottom: 16px;
}

.empty-state h3 {
  color: #374151;
  margin-bottom: 8px;
}

.empty-state p {
  color: #6b7280;
  margin-bottom: 20px;
}

.pagination-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: white;
  border-radius: 12px;
  padding: 16px;
  margin-top: 16px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  flex-wrap: wrap;
  gap: 12px;
}

.pagination-info {
  font-size: 0.85rem;
  color: #6b7280;
}

.pagination-controls {
  display: flex;
  align-items: center;
  gap: 12px;
}

.page-info {
  font-size: 0.85rem;
  color: #374151;
  font-weight: 600;
}

/* Modal Styles - Same as before */
.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.5);
  padding: 8px;
  overflow-y: auto;
}

.modal-content {
  background: white;
  border-radius: 12px;
  width: 100%;
  max-width: 500px;
  margin: 20px auto;
  box-shadow: 0 8px 24px rgba(0,0,0,0.2);
  max-height: 90vh;
  overflow-y: auto;
}

.modal-lg {
  max-width: 800px;
}

.modal-sm {
  max-width: 400px;
}

.modal-header {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 12px 16px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-radius: 12px 12px 0 0;
}

.modal-title {
  margin: 0;
  font-size: 1.1rem;
  word-break: break-word;
  flex: 1;
  margin-right: 8px;
}

.modal-close {
  background: none;
  border: none;
  color: white;
  font-size: 1.2rem;
  cursor: pointer;
  padding: 6px;
  border-radius: 50%;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.modal-close:hover {
  background: rgba(255,255,255,0.2);
}

.modal-body {
  padding: 16px;
}

.modal-footer {
  padding: 12px 16px;
  border-top: 1px solid #e2e8f0;
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 8px;
}

/* Form Styles */
.form-group {
  margin-bottom: 16px;
}

.form-label {
  font-weight: 600;
  color: #374151;
  margin-bottom: 6px;
  font-size: 0.9rem;
  display: block;
}

.form-select {
  width: 100%;
  padding: 8px 12px;
  border: 2px solid #e5e7eb;
  border-radius: 6px;
  font-size: 14px;
  background: white;
  min-height: 36px;
}

.form-select:focus {
  outline: none;
  border-color: #3b82f6;
}

/* Toast */
.toast {
  position: fixed;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%) translateY(100%);
  padding: 12px 20px;
  border-radius: 8px;
  color: white;
  font-weight: 600;
  z-index: 10000;
  transition: transform 0.3s ease;
  max-width: calc(100vw - 32px);
  text-align: center;
  font-size: 0.9rem;
}

.toast.show {
  transform: translateX(-50%) translateY(0);
}

.toast.success { background: #10b981; }
.toast.error { background: #ef4444; }
.toast.info { background: #3b82f6; }

/* Animations */
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* RESPONSIVE DESIGN - TABLET & DESKTOP */
@media (min-width: 480px) {
  .booking-container {
    padding: 12px;
  }
  
  .page-title {
    font-size: 1.5rem;
  }
  
  .search-row {
    /* flex-direction: row; */
    align-items: start;
    gap: 12px;
    min-width: 0; /* Prevent row overflow */
  }
  
  .search-group {
    flex: 1;
    min-width: 0; /* Critical for flex shrinking */
    max-width: calc(100% - 120px); /* Reserve space for button */
  }
  
  .search-btn-group {
    flex-shrink: 0;
    min-width: 200px; /* Ensure button has minimum space */
  }
  
  .search-btn {
    width: auto;
    min-width: 200px;
    flex-shrink: 0;
    white-space: nowrap;
  }
  
  .date-row {
    flex-direction: row;
    gap: 12px;
    min-width: 0;
  }
  
  .date-row .filter-group {
    flex: 1;
    min-width: 0; /* Allow flexible shrinking */
    max-width: calc(50% - 6px); /* Ensure equal distribution */
  }
  
  .kpi-cards {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .toast {
    top: 20px;
    bottom: auto;
    right: 20px;
    left: auto;
    transform: translateX(100%);
    max-width: 400px;
  }
  
  .toast.show {
    transform: translateX(0);
  }
}

@media (min-width: 768px) {
  .booking-container {
    padding: 20px;
    max-width: 1400px;
  }
  
  .page-title {
    font-size: 1.8rem;
  }
  
  .filters-section {
    padding: 20px;
  }
  
  .dropdowns-row {
    flex-direction: row;
    gap: 12px;
    min-width: 0;
  }
  
  .dropdowns-row .filter-group {
    flex: 1;
    min-width: 0; /* Allow flexible shrinking */
    max-width: calc(33.333% - 8px); /* Equal distribution for 3 items */
  }
  
  .controls-row {
    flex-direction: row;
    gap: 12px;
    min-width: 0;
  }
  
  .controls-row .filter-group {
    flex: 1;
    min-width: 0; /* Allow flexible shrinking */
    max-width: calc(50% - 6px); /* Equal distribution for 2 items */
  }
  
  .kpi-cards {
    grid-template-columns: repeat(4, 1fr);
  }
  
  .bookings-table th,
  .bookings-table td {
    padding: 12px;
    font-size: 0.85rem;
  }
  
  .child-tickets-grid {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .modal-footer {
    grid-template-columns: auto auto;
    justify-content: flex-end;
  }
}

@media (min-width: 1024px) {
  .child-tickets-grid {
    grid-template-columns: repeat(3, 1fr);
  }
}

/* Mobile Table Optimization */
@media (max-width: 767px) {
  .table-container {
    overflow-x: auto;
  }
  
  .bookings-table {
    min-width: 800px;
  }
  
  .child-tickets-container {
    padding: 12px;
  }
  
  .child-ticket-item {
    grid-template-columns: 1fr;
  }
}

/* Touch Device Optimizations */
@media (hover: none) and (pointer: coarse) {
  .booking-row:hover,
  .btn:hover {
    transform: none;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }
}
</style>

<script>
(function() {
    'use strict';
    
    // Global state
    let bookings = [];
    let childLotteries = [];
    let agents = [];
    let currentPage = 1;
    let itemsPerPage = 25;
    let totalPages = 1;
    let totalItems = 0;
    let expandedRows = new Set();
    let currentBookingId = null;
    let isLoading = false;
    let currentKpiData = {};
    
    // Current filters
    let currentFilters = {
        customerSearch: '',
        fromDateTime: '',
        toDateTime: '',
        childLotteryId: '',
        agentId: '',
        status: '',
        sort: 'booking.date_desc',
        win: 'WON',
    };
    
    // Initialize
    document.addEventListener('DOMContentLoaded', function() {
        initializeBookingManagement();
        setupEventListeners();
        loadInitialData();
    });
    
    function initializeBookingManagement() {
        console.log('Booking Management System Initialized');
        setDefaultDateTimeRange();
    }
    
    function setupEventListeners() {
        // Search button
        document.getElementById('searchBtn').addEventListener('click', handleSearch);
        document.getElementById('clearSearch').addEventListener('click', clearSearch);
        
        // Enter key for search
        document.getElementById('customerSearch').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                handleSearch();
            }
        });
        
        // Filters - immediate response for non-search filters
        document.getElementById('fromDateTime').addEventListener('change', applyFilters);
        document.getElementById('toDateTime').addEventListener('change', applyFilters);
        document.getElementById('childLotteryFilter').addEventListener('change', applyFilters);
        document.getElementById('agentFilter').addEventListener('change', applyFilters);
        document.getElementById('statusFilter').addEventListener('change', applyFilters);
        document.getElementById('sortFilter').addEventListener('change', applyFilters);
        document.getElementById('itemsPerPageFilter').addEventListener('change', handleItemsPerPageChange);
        document.getElementById('resetFilters').addEventListener('click', resetAllFilters);
        
        // Customer search input
        document.getElementById('customerSearch').addEventListener('input', function(e) {
            const clearBtn = document.getElementById('clearSearch');
            clearBtn.style.display = e.target.value.trim() ? 'block' : 'none';
        });
        
        // Pagination
        document.getElementById('prevPageBtn').addEventListener('click', () => changePage(currentPage - 1));
        document.getElementById('nextPageBtn').addEventListener('click', () => changePage(currentPage + 1));
        
        // Modal buttons
        document.getElementById('updateBookingBtn').addEventListener('click', openStatusModal);
        document.getElementById('saveStatusBtn').addEventListener('click', saveBookingStatus);
    }
    
    // Set default date-time range (last 7 days)
    function setDefaultDateTimeRange() {
        const now = new Date();
        const sevenDaysAgo = new Date(now.getTime() - (7 * 24 * 60 * 60 * 1000));
        
        // Format to datetime-local input format
        const formatDateTime = (date) => {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const hour = String(date.getHours()).padStart(2, '0');
            const minute = String(date.getMinutes()).padStart(2, '0');
            return `${year}-${month}-${day}T${hour}:${minute}`;
        };
        
        document.getElementById('fromDateTime').value = formatDateTime(sevenDaysAgo);
        document.getElementById('toDateTime').value = formatDateTime(now);
    }
    
    // Load initial data
    async function loadInitialData() {
        try {
            await Promise.all([
                loadChildLotteries(),
                loadAgents()
            ]);
            
            populateFilterOptions();
            applyFilters(); // Load bookings with default filters
            
        } catch (error) {
            console.error('Error loading initial data:', error);
            showToast('Error loading filter options: ' + error.message, 'error');
        }
    }
    
    // Load child lotteries for filter dropdown
    async function loadChildLotteries() {
        try {
            const response = await fetch('/bookings/api/child-lotteries', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            childLotteries = data.childLotteries || [];
            
        } catch (error) {
            console.error('Error loading child lotteries:', error);
            // Don't throw - this is for filtering only
        }
    }
    
    // Load agents for filter dropdown
    async function loadAgents() {
        try {
            const response = await fetch('/bookings/api/agents/dropdown', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            agents = data.agents || [];
            
        } catch (error) {
            console.error('Error loading agents:', error);
            // Don't throw - this is for filtering only
        }
    }
    
    // Populate filter dropdown options
    function populateFilterOptions() {
        // Populate child lottery filter
        const childLotteryFilter = document.getElementById('childLotteryFilter');
        childLotteryFilter.innerHTML = '<option value="">All Child Lotteries</option>';
        childLotteries.forEach(lottery => {
            const option = document.createElement('option');
            option.value = lottery.childId;
            option.textContent = `${lottery.lotteryName} - ${formatDate(lottery.drawDate)}`;
            childLotteryFilter.appendChild(option);
        });
        
        // Populate agent filter
        const agentFilter = document.getElementById('agentFilter');
        agentFilter.innerHTML = '<option value="">All Agents</option>';
        agents.forEach(agent => {
            const option = document.createElement('option');
            option.value = agent._id;
            option.textContent = agent.name;
            agentFilter.appendChild(option);
        });
    }
    
    // Handle search button click
    function handleSearch() {
        currentFilters.customerSearch = document.getElementById('customerSearch').value.trim();
        currentPage = 1;
        loadBookings();
    }
    
    // Clear search
    function clearSearch() {
        document.getElementById('customerSearch').value = '';
        document.getElementById('clearSearch').style.display = 'none';
        currentFilters.customerSearch = '';
        currentPage = 1;
        loadBookings();
    }
    
    // Apply filters (non-search filters)
    function applyFilters() {
        currentFilters.fromDateTime = document.getElementById('fromDateTime').value;
        currentFilters.toDateTime = document.getElementById('toDateTime').value;
        currentFilters.childLotteryId = document.getElementById('childLotteryFilter').value;
        currentFilters.agentId = document.getElementById('agentFilter').value;
        currentFilters.status = document.getElementById('statusFilter').value;
        currentFilters.sort = document.getElementById('sortFilter').value;
        
        currentPage = 1;
        loadBookings();
    }
    
    // Reset all filters
    function resetAllFilters() {
        document.getElementById('customerSearch').value = '';
        document.getElementById('clearSearch').style.display = 'none';
        document.getElementById('childLotteryFilter').value = '';
        document.getElementById('agentFilter').value = '';
        document.getElementById('statusFilter').value = '';
        document.getElementById('sortFilter').value = 'booking.date_desc';
        setDefaultDateTimeRange();
        
        currentFilters = {
            customerSearch: '',
            fromDateTime: document.getElementById('fromDateTime').value,
            toDateTime: document.getElementById('toDateTime').value,
            childLotteryId: '',
            agentId: '',
            status: '',
            sort: 'booking.date_desc'
        };
        
        currentPage = 1;
        loadBookings();
    }
    
    // Handle items per page change
    function handleItemsPerPageChange() {
        itemsPerPage = parseInt(document.getElementById('itemsPerPageFilter').value);
        currentPage = 1;
        loadBookings();
    }
    
    // Load bookings from backend with filters and update KPIs
    async function loadBookings() {
        if (isLoading) return;
        
        try {
            isLoading = true;
            showLoading(true);
            hideKpiSection();
            
            // Build query parameters
            const params = new URLSearchParams({
                page: currentPage,
                limit: itemsPerPage,
                sort: currentFilters.sort
            });
            
            // Add optional filters
            if (currentFilters.customerSearch) params.append('customerSearch', currentFilters.customerSearch);
            if (currentFilters.fromDateTime) params.append('fromDateTime', currentFilters.fromDateTime);
            if (currentFilters.toDateTime) params.append('toDateTime', currentFilters.toDateTime);
            if (currentFilters.childLotteryId) params.append('childLotteryId', currentFilters.childLotteryId);
            if (currentFilters.agentId) params.append('agentId', currentFilters.agentId);
            if (currentFilters.status) params.append('status', currentFilters.status);
            
            const response = await fetch(`/bookings/api/bookings?${params.toString()}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            bookings = data.bookings || [];
            totalItems = data.pagination?.totalItems || 0;
            totalPages = data.pagination?.totalPages || 1;
            currentPage = data.pagination?.currentPage || 1;
            currentKpiData = data.kpi || {};
            
            // Update KPI display
            updateKpiDisplay();
            
            renderBookings();
            updatePagination();
            showLoading(false);
            
        } catch (error) {
            console.error('Error loading bookings:', error);
            showLoading(false);
            showToast('Error loading bookings: ' + error.message, 'error');
            showEmptyState();
        } finally {
            isLoading = false;
        }
    }
    
    // Update KPI display with the data from backend
    function updateKpiDisplay() {
        // Update KPI values
        document.getElementById('kpiTotalTickets').textContent = (currentKpiData.totalTickets || 0).toLocaleString();
        document.getElementById('kpiTotalRevenue').textContent = `Nu${(currentKpiData.totalRevenue || 0).toLocaleString()}`;
        document.getElementById('kpiTotalTicketNumbers').textContent = (currentKpiData.totalTicketNumbers || 0).toLocaleString();
        document.getElementById('kpiTotalWonNumbers').textContent = (currentKpiData.totalWonTicketNumbers || 0).toLocaleString();
        
        // Show KPI section
        showKpiSection();
    }
    
    // Show/hide KPI section
    function showKpiSection() {
        document.getElementById('kpiSection').style.display = 'block';
    }
    
    function hideKpiSection() {
        document.getElementById('kpiSection').style.display = 'none';
    }
    
    // Format date
    function formatDate(dateString) {
        if (!dateString) return '';
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
    }
    
    // Format date-time
    function formatDateTime(dateString) {
        if (!dateString) return '';
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }
    
    // Change page
    function changePage(page) {
        if (page >= 1 && page <= totalPages && !isLoading) {
            currentPage = page;
            loadBookings();
        }
    }
    
    // Update pagination
    function updatePagination() {
        const startItem = totalItems > 0 ? (currentPage - 1) * itemsPerPage + 1 : 0;
        const endItem = Math.min(currentPage * itemsPerPage, totalItems);
        
        document.getElementById('startItem').textContent = startItem;
        document.getElementById('endItem').textContent = endItem;
        document.getElementById('totalItems').textContent = totalItems;
        document.getElementById('currentPage').textContent = currentPage;
        document.getElementById('totalPages').textContent = totalPages;
        
        document.getElementById('prevPageBtn').disabled = currentPage === 1;
        document.getElementById('nextPageBtn').disabled = currentPage === totalPages;
        
        document.getElementById('paginationContainer').style.display = 
            totalItems > 0 ? 'flex' : 'none';
    }

    const tbody = document.getElementById('bookingsTableBody');
    
    // Render bookings table
    function renderBookings() {
        if (bookings.length === 0) {
            showEmptyState();
            tbody.innerHTML = ``;
            return;
        }
        
        hideEmptyState();
        
        
        let html = '';
        
        bookings.forEach(booking => {
            const isExpanded = expandedRows.has(booking._id);
            
            html += `
                <tr class="booking-row ${isExpanded ? 'expanded' : ''}" data-booking-id="${booking._id}">
                    <td>
                        <button type="button" class="expand-btn ${isExpanded ? 'expanded' : ''}" 
                                onclick="toggleRow('${booking._id}')">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </td>
                    <td>
                        <span class="booking-id">${booking.displayId || booking.ticketNumber}</span>
                    </td>
                    <td>
                        <div class="customer-info">
                            <div class="customer-name">${booking.customer.name}</div>
                            <div class="customer-phone">${booking.customer.phone}</div>
                        </div>
                    </td>
                    <td>
                        <div class="agent-name">${booking.agent.name}</div>
                    </td>
                    <td class="text-center">
                        <strong>${booking.financial.quantity}</strong>
                    </td>
                    <td>
                        <div class="amount-display">Nu${booking.financial.totalAmount.toLocaleString()}</div>
                    </td>
                    <td>
                        <span class="status-badge ${booking.booking.status}">
                            <span class="status-dot"></span>
                            ${booking.booking.status.charAt(0).toUpperCase() + booking.booking.status.slice(1)}
                        </span>
                    </td>
                    <td>
                        <div class="date-display">
                            ${formatDateTime(booking.booking.date)}
                        </div>
                    </td>
                    <td>
                        <div class="table-actions">
                            <button type="button" class="btn btn-primary btn-sm btn-icon" 
                                    onclick="openBookingModal('${booking._id}')"
                                    title="View Details">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button type="button" class="btn btn-warning btn-sm btn-icon" 
                                    onclick="openDirectStatusModal('${booking._id}')"
                                    title="Update Status">
                                <i class="fas fa-edit"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `;
            
            // Child tickets row
            if (isExpanded) {
                html += `
                    <tr class="child-tickets-row show">
                        <td colspan="9" class="child-tickets-cell">
                            <div class="child-tickets-container">
                                <div class="child-tickets-title">
                                    <i class="fas fa-ticket-alt"></i>
                                    Ticket Details (${booking.tickets.length} tickets)
                                </div>
                                <div class="child-tickets-grid">
                `;
                
                booking.tickets.forEach(ticket => {
                    html += `
                        <div class="child-ticket-item">
                            <div class="child-ticket-detail">
                                <div class="child-ticket-label">Ticket Number</div>
                                <div class="child-ticket-value">
                                    <span class="child-ticket-number">${ticket.number}</span>
                                </div>
                            </div>
                            <div class="child-ticket-detail">
                                <div class="child-ticket-label">Child Lottery</div>
                                <div class="child-ticket-value">${ticket.lottery.name}</div>
                            </div>
                            <div class="child-ticket-detail">
                                <div class="child-ticket-label">Draw #</div>
                                <div class="child-ticket-value">${ticket.lottery.drawNumber}</div>
                            </div>
                            <div class="child-ticket-detail">
                                <div class="child-ticket-label">Draw Date</div>
                                <div class="child-ticket-value">${formatDateTime(ticket.lottery.drawDate)}</div>
                            </div>
                            <div class="child-ticket-detail">
                                <div class="child-ticket-label">Type</div>
                                <div class="child-ticket-value">Type ${ticket.type}</div>
                            </div>
                            <div class="child-ticket-detail">
                                <div class="child-ticket-label">Amount</div>
                                <div class="child-ticket-value">Nu${ticket.chargeAmount.toLocaleString()}</div>
                            </div>
                        </div>
                    `;
                });
                
                html += `
                                </div>
                            </div>
                        </td>
                    </tr>
                `;
            }
        });
        
        tbody.innerHTML = html;
    }
    
    // Toggle expandable row
    window.toggleRow = function(bookingId) {
        if (expandedRows.has(bookingId)) {
            expandedRows.delete(bookingId);
        } else {
            expandedRows.add(bookingId);
        }
        renderBookings();
    };
    
    // Clear all filters
    window.clearAllFilters = function() {
        resetAllFilters();
    };
    
    // Show/hide loading state
    function showLoading(show) {
        document.getElementById('loadingContainer').style.display = show ? 'block' : 'none';
        document.getElementById('bookingsContainer').style.display = show ? 'none' : 'block';
    }
    
    // Show/hide empty state
    function showEmptyState() {
        document.getElementById('bookingsContainer').style.display = 'none';
        document.getElementById('emptyState').style.display = 'block';
        document.getElementById('paginationContainer').style.display = 'none';
    }
    
    function hideEmptyState() {
        document.getElementById('bookingsContainer').style.display = 'block';
        document.getElementById('emptyState').style.display = 'none';
    }
    
    // Open booking details modal
    window.openBookingModal = function(bookingId) {
        const booking = bookings.find(b => b._id === bookingId);
        if (!booking) return;
        
        currentBookingId = bookingId;
        
        const modalBody = document.getElementById('bookingDetails');
        modalBody.innerHTML = `
            <div style="display: grid; gap: 20px;">
                <div style="background: #f8fafc; padding: 16px; border-radius: 8px;">
                    <h4 style="margin-bottom: 12px; color: #374151;">Booking Information</h4>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 12px;">
                        <div><strong>Booking ID:</strong> ${booking.displayId || booking.ticketNumber}</div>
                        <div><strong>Date:</strong> ${formatDateTime(booking.booking.date)}</div>
                        <div><strong>Status:</strong> <span class="status-badge ${booking.booking.status}">${booking.booking.status}</span></div>
                    </div>
                </div>
                
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px;">
                    <div style="background: #f8fafc; padding: 16px; border-radius: 8px;">
                        <h4 style="margin-bottom: 12px; color: #374151;">Customer Details</h4>
                        <div><strong>Name:</strong> ${booking.customer.name}</div>
                        <div><strong>Phone:</strong> ${booking.customer.phone}</div>
                    </div>
                    
                    <div style="background: #f8fafc; padding: 16px; border-radius: 8px;">
                        <h4 style="margin-bottom: 12px; color: #374151;">Agent Details</h4>
                        <div><strong>Name:</strong> ${booking.agent.name}</div>
                        <div><strong>Phone:</strong> ${booking.agent.phone}</div>
                        <div><strong>Role:</strong> ${booking.agent.role.join(', ')}</div>
                    </div>
                </div>
                
                <div style="background: #f8fafc; padding: 16px; border-radius: 8px;">
                    <h4 style="margin-bottom: 12px; color: #374151;">Financial Summary</h4>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 12px;">
                        <div><strong>Quantity:</strong> ${booking.financial.quantity} tickets</div>
                        <div><strong>Subtotal:</strong> Nu${booking.financial.subtotal.toLocaleString()}</div>
                        <div><strong>Tax:</strong> Nu${booking.financial.tax.toLocaleString()}</div>
                        <div><strong>Total:</strong> Nu${booking.financial.totalAmount.toLocaleString()}</div>
                        <div><strong>Currency:</strong> ${booking.financial.currency}</div>
                        <div><strong>Payment Method:</strong> ${booking.payment.method}</div>
                    </div>
                    ${booking.payment.reference ? `<div style="margin-top: 8px;"><strong>Payment Reference:</strong> ${booking.payment.reference}</div>` : ''}
                </div>
                
                <div style="background: #f8fafc; padding: 16px; border-radius: 8px;">
                    <h4 style="margin-bottom: 12px; color: #374151;">Tickets (${booking.tickets.length})</h4>
                    <div style="display: grid; gap: 8px;">
                        ${booking.tickets.map(ticket => `
                            <div style="background: white; border: 1px solid #e5e7eb; border-radius: 6px; padding: 12px; display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 8px; font-size: 0.85rem;">
                                <div><strong>Number:</strong> <span style="font-family: monospace; background: #f1f5f9; padding: 2px 6px; border-radius: 4px;">${ticket.number}</span></div>
                                <div><strong>Lottery:</strong> ${ticket.lottery.name}</div>
                                <div><strong>Draw:</strong> #${ticket.lottery.drawNumber}</div>
                                <div><strong>Type:</strong> ${ticket.type}</div>
                                <div><strong>Amount:</strong> Nu${ticket.chargeAmount.toLocaleString()}</div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>
        `;
        
        document.getElementById('bookingModal').style.display = 'block';
    };
    
    // Open status modal directly
    window.openDirectStatusModal = function(bookingId) {
        const booking = bookings.find(b => b._id === bookingId);
        if (!booking) return;
        
        currentBookingId = bookingId;
        document.getElementById('statusBookingId').value = bookingId;
        document.getElementById('newBookingStatus').value = booking.booking.status;
        document.getElementById('statusModal').style.display = 'block';
    };
    
    // Open status modal from booking modal
    function openStatusModal() {
        if (!currentBookingId) return;
        
        const booking = bookings.find(b => b._id === currentBookingId);
        if (!booking) return;
        
        document.getElementById('statusBookingId').value = currentBookingId;
        document.getElementById('newBookingStatus').value = booking.booking.status;
        document.getElementById('statusModal').style.display = 'block';
    }
    
    // Close modals
    window.closeBookingModal = function() {
        document.getElementById('bookingModal').style.display = 'none';
        currentBookingId = null;
    };
    
    window.closeStatusModal = function() {
        document.getElementById('statusModal').style.display = 'none';
    };
    
    // Save booking status
    async function saveBookingStatus() {
        const bookingId = document.getElementById('statusBookingId').value;
        const newStatus = document.getElementById('newBookingStatus').value;
        
        if (!bookingId || !newStatus) return;
        
        const saveBtn = document.getElementById('saveStatusBtn');
        saveBtn.classList.add('loading');
        
        try {
            const response = await fetch(`/bookings/api/bookings/${bookingId}/status`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status: newStatus })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const result = await response.json();
            
            if (result.success) {
                showToast('Booking status updated successfully', 'success');
                closeStatusModal();
                closeBookingModal();
                await loadBookings(); // Refresh the bookings list
            } else {
                throw new Error(result.message || 'Failed to update booking status');
            }
            
        } catch (error) {
            console.error('Error updating booking status:', error);
            showToast('Error updating booking status: ' + error.message, 'error');
        } finally {
            saveBtn.classList.remove('loading');
        }
    }
    
    // Show toast notification
    function showToast(message, type = 'info') {
        const toast = document.getElementById('bookingToast');
        toast.textContent = message;
        toast.className = `toast ${type}`;
        toast.classList.add('show');
        
        setTimeout(() => {
            toast.classList.remove('show');
        }, 3000);
    }
    
    // Close modals when clicking outside
    window.addEventListener('click', function(event) {
        if (event.target.classList.contains('modal')) {
            if (event.target.id === 'bookingModal') {
                closeBookingModal();
            } else if (event.target.id === 'statusModal') {
                closeStatusModal();
            }
        }
    });
    
})();
</script>

</body>
</html>