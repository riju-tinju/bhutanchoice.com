<%# winning-numbers-animation.ejs - Mechanical Counter Style %>

<style>
  /* Mechanical counter animation styles */
  .winning-numbers-container {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 8px;
    margin: 15px 0;
  }
  
  .winning-number {
    display: flex;
    justify-content: center;
    background: transparent;
    border-radius: 8px;
    overflow: hidden;
    padding: 0;
    margin: 5px;
    gap: 3px;
  }
  
  .digit-container {
    position: relative;
    height: 50px;
    width: 35px;
    overflow: hidden;
    background: linear-gradient(145deg, #c0c0c0, #a8a8a8);
    border: 2px solid #999;
    border-radius: 6px;
    box-shadow: 
      inset 0 2px 4px rgba(255,255,255,0.3),
      inset 0 -2px 4px rgba(0,0,0,0.3),
      0 2px 6px rgba(0,0,0,0.2);
  }
  
  .digit-stack {
    position: absolute;
    top: 2px;
    left: 2px;
    width: calc(100% - 4px);
    height: auto;
    transform-style: preserve-3d;
    transition: transform 1.2s cubic-bezier(0.34, 1.56, 0.64, 1);
  }
  
  .digit {
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 1.4rem;
    font-weight: 700;
    color: #000;
    width: 100%;
    height: 46px;
    background: linear-gradient(180deg, #ffffff 0%, #f5f5f5 50%, #e8e8e8 100%);
    border: 1px solid #ddd;
    border-radius: 3px;
    font-family: 'Courier New', monospace;
    text-shadow: 0 1px 0 rgba(255,255,255,0.8);
    box-shadow: 
      inset 0 1px 2px rgba(255,255,255,0.8),
      inset 0 -1px 1px rgba(0,0,0,0.1);
  }
  
  .digit:last-child {
    border-bottom: 1px solid #ddd;
  }
  
  .ticket-label {
    text-align: center;
    font-size: 0.75rem;
    color: #666;
    margin-top: 5px;
    font-weight: 500;
  }
  
  /* Hover effect for mechanical feel */
  .digit-container:hover {
    transform: translateY(-1px);
    box-shadow: 
      inset 0 2px 4px rgba(255,255,255,0.4),
      inset 0 -2px 4px rgba(0,0,0,0.4),
      0 4px 8px rgba(0,0,0,0.3);
  }
  
  /* Style for collapsed content */
  .result-content.collapsed {
    display: none;
  }
  
  .result-content:not(.collapsed) {
    display: block;
  }
</style>

<script>
  // Modified toggleResult function to handle animation every time
  function toggleResult(id) {
    const element = document.getElementById(id);
    const arrow = document.getElementById('arrow-' + id);
    
    // Toggle visibility
    element.classList.toggle('collapsed');
    arrow.classList.toggle('fa-chevron-down');
    arrow.classList.toggle('fa-chevron-up');
    
    // If expanding, trigger animation every time
    if (!element.classList.contains('collapsed')) {
      // Small delay to allow DOM to update
      setTimeout(() => {
        animateWinningNumbers(id);
      }, 50);
    }
  }
  
  // Initialize animation for a specific card
  function animateWinningNumbers(cardId) {
    const container = document.getElementById(cardId);
    const winningNumberElements = container.querySelectorAll('.winning-number');
    
    // Animate each winning number
    winningNumberElements.forEach((element, index) => {
      const ticketNumber = element.getAttribute('data-ticket-number') || element.textContent;
      initializeTicketNumber(element, ticketNumber);
      
      // Animate with a slight delay between numbers
      setTimeout(() => {
        animateTicketNumber(element, ticketNumber);
      }, index * 200);
    });
  }
  
  // Initialize a ticket number display
  function initializeTicketNumber(container, ticketNumber) {
    container.innerHTML = '';
    
    // Use actual ticket number length (no padding)
    const actualNumber = ticketNumber.toString();
    
    // Create a digit container for each digit
    for (let i = 0; i < actualNumber.length; i++) {
      const digitContainer = document.createElement('div');
      digitContainer.className = 'digit-container';
      
      const digitStack = document.createElement('div');
      digitStack.className = 'digit-stack';
      
      // Create 15 digits (0-9 plus some extra for smooth animation)
      for (let j = 0; j < 15; j++) {
        const digit = document.createElement('div');
        digit.className = 'digit';
        digit.textContent = j % 10; // This will create numbers 0-9, then 0-4 again
        digitStack.appendChild(digit);
      }
      
      digitContainer.appendChild(digitStack);
      container.appendChild(digitContainer);
      
      // Set initial position
      digitStack.style.transform = 'translateY(0px)';
    }
  }

  // Animate a ticket number with mechanical counter effects
  function animateTicketNumber(container, ticketNumber) {
    const actualNumber = ticketNumber.toString();
    const digitStacks = container.querySelectorAll('.digit-stack');
    
    // Animate each digit
    for (let i = 0; i < actualNumber.length; i++) {
      const targetDigit = parseInt(actualNumber[i]);
      const digitStack = digitStacks[i];
      
      // Calculate how far to move the stack (each digit is 46px tall)
      const randomCycles = 15 + Math.floor(Math.random() * 8); // Random number of cycles
      const finalPosition = targetDigit * 46; // Each digit is 46px tall
      
      // Start with a fast random animation
      let currentPosition = 0;
      const randomInterval = setInterval(() => {
        currentPosition += 46;
        digitStack.style.transform = `translateY(-${currentPosition}px)`;
        
        // When we've done enough random cycles, go to the target
        if (currentPosition >= randomCycles * 46) {
          clearInterval(randomInterval);
          
          // Now smoothly animate to the final position with mechanical ease
          setTimeout(() => {
            digitStack.style.transition = 'transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
            digitStack.style.transform = `translateY(-${finalPosition}px)`;
          }, 50);
        }
      }, 70 - (i * 8)); // Different speed for each digit position
    }
  }
</script>