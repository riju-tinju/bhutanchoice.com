<%# winning-numbers-animation.ejs - Fixed Positioning and Animation %>

<style>
  /* Animation styles for winning numbers */
  .winning-numbers-container {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 12px;
    margin: 15px 0;
    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
    border-radius: 6px;
  }
  
  .winning-number {
    display: flex;
    justify-content: center;
    margin: 5px;
  }
  
  .digit-container {
    position: relative;
    width: 53px;
    height: 80px;
    overflow: hidden;
    perspective: 400px;
  }
  
  .digit-stack {
    position: absolute;
    top: 0; /* Back to normal position */
    left: 0;
    width: 100%;
    height: auto;
    transform-style: preserve-3d;
    transition: transform 1.2s cubic-bezier(0.34, 1.56, 0.64, 1);
    z-index: 1;
  }
  
  .digit {
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 22px;
    font-weight: 700;
    color: #000;
    width: 100%;
    height: 80px;
    background: transparent;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
  }
  
  .counter-box-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url('/images/counter-box.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    z-index: 3;
    pointer-events: none;
  }
  
  .ticket-label {
    text-align: center;
    font-size: 0.9rem;
    color: #666;
    margin-top: 5px;
  }
  
  /* Style for collapsed content */
  .result-content.collapsed {
    display: none;
  }
  
  .result-content:not(.collapsed) {
    display: block;
  }
</style>

<script>
  // Modified toggleResult function to handle animation
  function toggleResult(id) {
    const element = document.getElementById(id);
    const arrow = document.getElementById('arrow-' + id);
    
    // Toggle visibility
    element.classList.toggle('collapsed');
    arrow.classList.toggle('fa-chevron-down');
    arrow.classList.toggle('fa-chevron-up');
    
    // If expanding, trigger animation
    if (!element.classList.contains('collapsed')) {
      // Small delay to allow DOM to update
      setTimeout(() => {
        animateWinningNumbers(id);
      }, 50);
    }
  }
  
  // Initialize animation for a specific card
  function animateWinningNumbers(cardId) {
    const container = document.getElementById(cardId);
    const winningNumberElements = container.querySelectorAll('.winning-number');
    
    // Animate each winning number
    winningNumberElements.forEach((element, index) => {
      const ticketNumber = element.getAttribute('data-ticket-number') || element.textContent;
      initializeTicketNumber(element, ticketNumber);
      
      // Animate with a slight delay between numbers
      setTimeout(() => {
        animateTicketNumber(element, ticketNumber);
      }, index * 200);
    });
  }
  
  // Initialize a ticket number display
  function initializeTicketNumber(container, ticketNumber) {
    container.innerHTML = '';
    
    // Use actual ticket number length
    const actualNumber = ticketNumber.toString();
    
    // Create a digit container for each digit
    for (let i = 0; i < actualNumber.length; i++) {
      const digitContainer = document.createElement('div');
      digitContainer.className = 'digit-container';
      
      const digitStack = document.createElement('div');
      digitStack.className = 'digit-stack';
      
      // Create 40 digits with random numbers
      for (let j = 0; j < 40; j++) {
        const digit = document.createElement('div');
        digit.className = 'digit';
        digit.textContent = Math.floor(Math.random() * 10); // Random numbers 0-9
        digitStack.appendChild(digit);
      }
      
      // Add counter box overlay
      const counterBoxOverlay = document.createElement('div');
      counterBoxOverlay.className = 'counter-box-overlay';
      
      digitContainer.appendChild(digitStack);
      digitContainer.appendChild(counterBoxOverlay);
      container.appendChild(digitContainer);
      
      // Set initial position - show first digit
      digitStack.style.transform = 'translateY(0px)';
    }
  }

  // Animate a ticket number with random effects
  function animateTicketNumber(container, ticketNumber) {
    const actualNumber = ticketNumber.toString();
    const digitStacks = container.querySelectorAll('.digit-stack');
    
    // Animate each digit
    for (let i = 0; i < actualNumber.length; i++) {
      const targetDigit = parseInt(actualNumber[i]);
      const digitStack = digitStacks[i];
      
      // Calculate animation parameters
      const randomCycles = 15 + Math.floor(Math.random() * 10);
      let currentStep = 0;
      
      // Start with fast random animation (top to bottom)
      const randomInterval = setInterval(() => {
        currentStep++;
        const currentPosition = currentStep * 80; // Move down by 80px each step
        digitStack.style.transform = `translateY(-${currentPosition}px)`; // Negative for upward scroll effect
        
        // When we've done enough random cycles, prepare for final number
        if (currentStep >= randomCycles) {
          clearInterval(randomInterval);
          
          // Set the target digit at the next position
          const digits = digitStack.querySelectorAll('.digit');
          if (digits[currentStep + 1]) {
            digits[currentStep + 1].textContent = targetDigit;
          }
          
          // Smoothly animate to show the target digit
          setTimeout(() => {
            digitStack.style.transition = 'transform 0.8s cubic-bezier(0.19, 1, 0.22, 1)';
            const finalPosition = (currentStep + 1) * 80;
            digitStack.style.transform = `translateY(-${finalPosition}px)`;
          }, 50);
        }
      }, 80 - (i * 10)); // Different speed for each digit position
    }
  }
</script>