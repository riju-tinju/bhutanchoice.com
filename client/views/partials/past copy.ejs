<!-- Past Results -->
<section>
  <% if(past && past.length>0){ %>
  <div class="flex items-center justify-between mb-6">
    <h2 class="text-xl font-bold section-title flex items-center">
      <i class="fas fa-history text-purple-500 mr-2 text-xl"></i>
      View All Results
    </h2>
    <!-- <button
                    class="bg-gradient-to-r from-purple-500 to-pink-500 text-white text-sm px-3 py-1 rounded-full font-semibold hover:shadow-lg transition-all">View
                    All</button> -->
  </div>

  <div class="space-y-5" id="past-lottories-container">

    <% for(let i=0; i < past.length; i++) { %>
    <div class="lottery-card <%= past[i].dayName %>-card cursor-pointer" onclick="toggleResult('past<%= i %>')">
      <div class="flex items-center justify-between">
        <div class="flex-1 card-element-spacing">
          <div class="flex items-center flex-wrap" style="row-gap: 9px; column-gap: 20px;">
            <span class="past-badge rounded-full">RESULT</span>
            <span class="card-text-secondary card-date">
              <%
const drawDate = new Date(past[i].drawDate);
const day = drawDate.getDate();
const month = drawDate.toLocaleString('en-US', { month: 'long' });
const year = drawDate.getFullYear();
let hours = drawDate.getHours();
const minutes = drawDate.getMinutes();
const ampm = hours >= 12 ? 'PM' : 'AM';
hours = hours % 12;
hours = hours ? hours : 12; // Convert 0 to 12
const formattedDate = drawDate.toLocaleDateString('en-GB', { // 'en-IN' for India English locale
  year: 'numeric',
  day: '2-digit',
  hour: '2-digit',
  month: 'short',
  minute: '2-digit',
  hour12: true,
  timeZone: 'Asia/Kolkata' // Specify the timezone for India Standard Time Asia/Kolkata Asia/Kolkata
}).replace(',', '');
%>
              <%= formattedDate %>
            </span>
          </div>
          <h3 class="card-text card-lottery-name">
            <%= past[i].name %><br><%= past[i].name2 %>
          </h3>

          <!-- Step 3a: Display all prizes -->
          <% past[i].prizes.forEach(prize => { %>
          <div class="flex items-center card-text-secondary">
            <i class="fas fa-trophy text-yellow-300 mr-2"></i>
            <span class="card-prize">
              <%= prize.rank %> Prize: ₹<%= prize.amount.toLocaleString('en-IN') %>
            </span><br>
          </div>
          <% }); %>

        </div>
        <div class="text-right ml-4">
          <i id="arrow-past<%= i %>" class="fas fa-chevron-down card-text text-xl transition-transform duration-300"></i>
        </div>
      </div>

      <div id="past<%= i %>" class="card-expand collapsed mt-6">
        <div class="result-container space-y-4">
          <!-- <% past[i].prizes.forEach(prize=> {const winner = past[i].winners.find(w => w.prizeRank === prize.rank); %>
          <div class="result-card">
            <div class="result-card-header">
              <%= prize.rank %> Prize
            </div>
            <div class="result-card-content">
              <div class="result-prize-amount">₹<%=prize.amount.toLocaleString('en-IN') %>/-</div>
              <% if(winner) { %>
              <div class="result-winning-number">
                <%= winner.ticketNumber %>
              </div>
              <% } else { %>
              <div class="result-winning-number result-winning-number_if_no_results underline-animated"></div>
              <% } %>
            </div>
          </div>
          <% }); %> -->

          <% past[i].winners.forEach(winner => { %>
          <% 
    // Format the time to 12-hour format with AM/PM
    const resultTime = new Date(winner.resultTime);
    const hours = resultTime.getHours();
    const minutes = resultTime.getMinutes();
    const ampm = hours >= 12 ? 'PM' : 'AM';
    const formattedHours = hours % 12 || 12;
    const formattedTime = `${formattedHours}:${minutes.toString().padStart(2, '0')}${ampm}`;
  %>

          <div class="result-card">
            <div class="result-card-header">
              <%= formattedTime %>
            </div>
            <div class="result-card-content">
              <div class="result-prize-amount">A B C</div>
              <!-- <% if(winner.winNumbers && winner.winNumbers.length > 0) { %>
              <div class="result-winning-numbers">
                <% winner.winNumbers.forEach(winNumber => { %>
                <div class="winning-number">
                  <%= winNumber.ticketNumber %>
                </div>
                <% }); %>
              </div>
              <% } else { %>
              <div class="result-winning-number result-winning-number_if_no_results underline-animated"></div>
              <% } %> -->

            </div>
          </div>
          <% }); %>
        </div>
      </div>
    </div>
    <% } %>

    <script>
      function toggleResult(id) {
        const element = document.getElementById(id);
        const arrow = document.getElementById('arrow-' + id);

        element.classList.toggle('collapsed');
        arrow.classList.toggle('fa-chevron-down');
        arrow.classList.toggle('fa-chevron-up');
      }
    </script>

    <!-- Load More Button -->
    <button onclick="getPastLottories()" class="load-more-btn w-full text-white py-4 font-semibold flex items-center
                                justify-center space-x-2" id="loadmoreBtn">
      <i class="fas fa-plus"></i>
      <span>Load More Results</span>
    </button>
    <% } %>
    <script>
      let currentPageNumber = 1;

      async function getPastLottories() {


        try {
          const response = await fetch('/api/get-past-lottories', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              page: currentPageNumber + 1
            })
          });

          if (!response.ok) {
            throw new Error(`Server responded with status ${response.status}`);
          }

          const result = await response.json();
          console.log(result)
          if (!result.success) {
            throw new Error(result.message || 'Unknown error occurred');
          }
          currentPageNumber += 1;


          const pastLotteries = result.items;
          console.log(pastLotteries)
          renderPastResults(pastLotteries);

          return
        } catch (err) {
          console.error('Failed to load past lotteries:', err.message);
          return
          // Optionally show user-friendly error in the UI
        }
      }
    </script>
    <!-- Disclaimer Button -->
    <div class="text-center py-4 px-4">
      <button id="disclaimerBtn" class="text-sm text-gray-500 hover:text-blue-500 transition-colors duration-300 underline">
        View Disclaimer
      </button>
    </div>

    <!-- ✅ Copyright -->
    <div class="text-center text-xs text-gray-400 pb-6 px-4">
      &copy; 2018 bhutanlotteryresults.com<br>All rights reserved.
    </div>
  </div>
</section>


<script>
  // Animated Number Counter
  function initializeAnimatedNumbers() {
    const containers = document.querySelectorAll('.animated-number-container');

    containers.forEach(container => {
      const number = container.dataset.number;
      const delay = parseInt(container.dataset.delay) || 0;

      if (number) {
        createDigitBoxes(container, number, delay);
      }
    });
  }

  function createDigitBoxes(container, number, delay) {
    const digits = number.toString().split('');

    digits.forEach((digit, index) => {
      const digitBox = document.createElement('div');
      digitBox.className = 'digit-box';
      digitBox.textContent = '0';
      container.appendChild(digitBox);

      // Start animation after delay
      setTimeout(() => {
        animateDigit(digitBox, parseInt(digit), index * 100);
      }, delay);
    });
  }

  function animateDigit(digitBox, targetDigit, delay) {
    setTimeout(() => {
      digitBox.classList.add('animating');

      let currentDigit = 0;
      const duration = 800;
      const steps = Math.max(10, targetDigit * 2);
      const stepDuration = duration / steps;

      const animate = () => {
        if (currentDigit <= targetDigit) {
          digitBox.textContent = currentDigit;

          if (currentDigit === targetDigit) {
            digitBox.classList.remove('animating');
            digitBox.classList.add('completed');
            return;
          }

          currentDigit++;
          setTimeout(animate, stepDuration);
        }
      };

      animate();
    }, delay);
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', function() {
    initializeAnimatedNumbers();
  });

  // Re-initialize when new content is loaded (for dynamic content)
  function reinitializeAnimatedNumbers() {
    initializeAnimatedNumbers();
  }
</script>