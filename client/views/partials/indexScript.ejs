<script>
   let todayDate = new Date();
    // alert(todayDate);
    // alert(upcoming[0].drawDate)
    // Step 5a: Countdown management
function updateCountdowns() {
    
    // Update today's lotteries countdowns
    <% if (todays) { %>
       <% todays.forEach((lottery, index) => { %>
         updateSingleCountdown('today-countdown<%= index %>', '<%= lottery.drawDate %>');
       <% }); %>
    <% } %>
    
    // Update first upcoming lottery countdown
    <% if (upcoming && upcoming.length > 0) { %>

       <% upcoming.forEach((lottery, index) => { %>
          updateSingleCountdown('upcoming-countdown<%= index %>',  moment('<%= lottery.drawDate %>').tz('Asia/Kolkata').format());
       <% }); %>
    <% } %>
   

}

function updateSingleCountdown(prefix, targetDateStr) {
    const now = new Date().getTime();
    const targetDate = new Date(targetDateStr).getTime();
    const distance = targetDate - now;

    if (distance > 0) {
        const days = Math.floor(distance / (1000 * 60 * 60 * 24));
        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((distance % (1000 * 60)) / 1000);

        const daysEl = document.getElementById(prefix + '-days');
        const hoursEl = document.getElementById(prefix + '-hours');
        const minutesEl = document.getElementById(prefix + '-minutes');
        const secondsEl = document.getElementById(prefix + '-seconds');

        if (daysEl) daysEl.textContent = days.toString().padStart(2, '0');
        if (hoursEl) hoursEl.textContent = hours.toString().padStart(2, '0');
        if (minutesEl) minutesEl.textContent = minutes.toString().padStart(2, '0');
        if (secondsEl) secondsEl.textContent = seconds.toString().padStart(2, '0');
    }
}

// Step 5b: Refresh results function
// async function refreshResults(lotteryId) {
//     const button = document.getElementById(`refresh-${lotteryId}`);
//     button.disabled = true;
//     button.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i>Refreshing...';
    
//     try {
//         const response = await fetch('/api/refresh-results', {
//             method: 'POST',
//             headers: {
//                 'Content-Type': 'application/json'
//             },
//             body: JSON.stringify({ lotteryId })
//         });
        
//         const result = await response.json();
        
//         if (result.success) {
//             // Reload page to show updated results
//             // window.location.reload();
//             return
//         } else {
//             throw new Error(result.message || 'Failed to refresh');
//             button.innerHTML = '<i class="fas fa-exclamation-triangle mr-1"></i>Try Again';
//             button.disabled = false;
//         }
//     } catch (error) {
//         console.error('Refresh failed:', error);
//         button.innerHTML = '<i class="fas fa-exclamation-triangle mr-1"></i>Try Again';
//         button.disabled = false;
//     }
// }
// Step 5b: Refresh results function
async function refreshResults(lotteryId) {
    const button = document.getElementById(`refresh-${lotteryId}`);
    button.disabled = true;
    button.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i>Refreshing...';
    
    try {
        const response = await fetch('/api/refresh-results', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ lotteryId })
        });
        
        const result = await response.json();
        
        if (result.success) {
            // Find the lottery card that contains this button
            const card = button.closest('.lottery-card');
            
            // Update the winners in the UI
            const resultContainer = card.querySelector('.result-container');
            
            // Clear existing results
            resultContainer.innerHTML = '';
            
            // Render updated results
            result.data.prizes.forEach(prize => {
                const winner = result.data.winners.find(w => w.prizeRank === prize.rank);
                
                const resultCard = document.createElement('div');
                resultCard.className = 'result-card';
                
                resultCard.innerHTML = `
                    <div class="result-card-header">${prize.rank} Prize</div>
                    <div class="result-card-content">
                        <div class="result-prize-amount">â‚¹${prize.amount.toLocaleString('en-IN')}/-</div>
                        <div class="result-winning-number ${winner?'':'underline-animated result-winning-number_if_no_results'} ">${
                            winner ? winner.ticketNumber : ''
                        }</div>
                    </div>
                `;
                
                resultContainer.appendChild(resultCard);
            });
            
            // Hide the refresh button if all prizes have winners
            const allPrizesHaveWinners = result.data.prizes.every(prize => 
                result.data.winners.some(w => w.prizeRank === prize.rank)
            );
            
            if (allPrizesHaveWinners) {
                button.style.display = 'none';
            } else {
                button.innerHTML = '<i class="fas fa-sync-alt mr-1"></i>Refresh Results';
                button.disabled = false;
            }
            
            // Show success message
            showToast('Results refreshed successfully', 'success');
            
        } else {
            throw new Error(result.message || 'Failed to refresh');
        }
    } catch (error) {
        console.error('Refresh failed:', error);
        button.innerHTML = '<i class="fas fa-exclamation-triangle mr-1"></i>Try Again';
        button.disabled = false;
        
        // Show error message
        showToast(error.message || 'Failed to refresh results', 'error');
    }
}

// Helper function to show toast notifications
function showToast(message, type) {
    const toast = document.createElement('div');
    toast.className = `fixed bottom-4 right-4 px-4 py-2 rounded-md text-white ${
        type === 'success' ? 'bg-green-500' : 'bg-red-500'
    }`;
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 3000);
}


// Step 5c: Initialize
setInterval(updateCountdowns, 1000);
updateCountdowns(); // Initial call

</script>