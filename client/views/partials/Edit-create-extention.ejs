<!-- Enhanced Create/Edit Lottery Modal -->
<div id="lotteryModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 id="modalTitle" class="modal-title">Create New Lottery</h2>
        </div>
        <div class="modal-body">
            <form id="lotteryForm">
                <!-- Lottery Details Section -->
                <div class="form-section">
                    <h3 class="form-section-title">
                        <i class="fas fa-info-circle"></i>
                        Lottery Details
                    </h3>
                    
                    <div class="form-grid">
                        <div class="form-group">
                            <label class="form-label">Lottery Name</label>
                            <input type="text" id="lotteryName" class="form-input" required placeholder="e.g., Monday Choice Weekly Lottery">
                        </div>

                        <div class="form-group">
                            <label class="form-label">Name 2</label>
                            <input type="text" id="lotteryName2" class="form-input" required placeholder="e.g., (MOC-12th Draw)">
                        </div>

                        <div class="form-group">
                            <label class="form-label">Draw Number</label>
                            <input type="number" id="drawNumber" class="form-input" required min="1" placeholder="e.g., 156">
                        </div>

                        <div class="form-group form-grid-full">
                            <label class="form-label">Draw Date & Time</label>
                            <input type="datetime-local" id="drawDate" class="form-input" required>
                        </div>
                    </div>
                </div>

                <!-- Prize Structure Section -->
                <div class="form-section">
                    <h3 class="form-section-title">
                        <i class="fas fa-trophy"></i>
                        Prize Structure
                    </h3>
                    
                    <div id="prizesContainer">
                        <div class="prize-item">
                            <div class="prize-rank-display">1st Prize</div>
                            <input type="number" placeholder="Amount (â‚¹)" class="prize-amount-input" required min="0">
                            <button type="button" class="remove-prize" onclick="removePrize(this)">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    
                    <button type="button" class="add-prize" onclick="addPrize()">
                        <i class="fas fa-plus"></i>
                        Add Prize
                    </button>
                </div>

                <!-- Winners Section -->
                <div class="form-section">
                    <h3 class="form-section-title">
                        <i class="fas fa-crown"></i>
                        Winners (Optional)
                    </h3>
                    

                    <button type="button" class="add-winner-group" onclick="addWinnerGroup()">
                        <i class="fas fa-plus"></i>
                        Add Winner Group
                    </button>

                    <div id="winnersContainer">
                        <!-- Winner groups will be added dynamically -->
                    </div>
                </div>

                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="submitBtn">Create Lottery</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Toast Notification -->
<div id="toast" class="toast"></div>

<style>
    * {
        font-family: 'Poppins', sans-serif;
    }

    /* Enhanced Modal styles */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(5px);
    }

    .modal.show {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }

    .modal-content {
        background: white;
        border-radius: 16px;
        max-width: 800px;
        width: 100%;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        position: relative;
    }

    .modal-header {
        background: linear-gradient(135deg, #3B82F6 0%, #1D4ED8 100%);
        color: white;
        padding: 24px;
        border-radius: 16px 16px 0 0;
        position: sticky;
        top: 0;
        z-index: 10;
    }

    .modal-title {
        font-size: 1.5rem;
        font-weight: 700;
        margin: 0;
    }

    .modal-body {
        padding: 24px;
    }

    .form-section {
        margin-bottom: 32px;
        padding: 20px;
        background: #F8FAFC;
        border-radius: 12px;
        border: 1px solid #E2E8F0;
    }

    .form-section-title {
        font-size: 1.2rem;
        font-weight: 700;
        color: #374151;
        margin-bottom: 16px;
        display: flex;
        align-items: center;
    }

    .form-section-title i {
        margin-right: 10px;
        color: #3B82F6;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: #374151;
        font-size: 0.95rem;
    }

    .form-input {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #E5E7EB;
        border-radius: 8px;
        font-size: 1rem;
        transition: all 0.3s ease;
        font-family: inherit;
    }

    .form-input:focus {
        outline: none;
        border-color: #3B82F6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .form-actions {
        display: flex;
        gap: 12px;
        justify-content: flex-end;
        margin-top: 32px;
        padding-top: 20px;
        border-top: 1px solid #E5E7EB;
    }

    .btn {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 0.95rem;
    }

    .btn-primary {
        background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
        color: white;
    }

    .btn-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    }

    .btn-secondary {
        background: #E5E7EB;
        color: #374151;
    }

    .btn-secondary:hover {
        background: #D1D5DB;
        transform: translateY(-1px);
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    /* Enhanced Prize Item Design */
    .prize-item {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 16px;
        padding: 16px;
        background: white;
        border-radius: 12px;
        border: 2px solid #E5E7EB;
        transition: all 0.3s ease;
    }

    .prize-item:hover {
        border-color: #3B82F6;
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.1);
    }

    .prize-rank-display {
        background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
        color: white;
        padding: 8px 16px;
        border-radius: 8px;
        font-weight: 700;
        font-size: 0.9rem;
        min-width: 80px;
        text-align: center;
        flex-shrink: 0;
    }

    .prize-amount-input {
        flex: 1;
        padding: 10px 14px;
        border: 2px solid #E5E7EB;
        border-radius: 8px;
        font-size: 1rem;
        transition: all 0.3s ease;
        max-width: 100%;
    }

    .prize-amount-input:focus {
        outline: none;
        border-color: #3B82F6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .remove-prize {
        background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 8px 12px;
        cursor: pointer;
        font-size: 0.875rem;
        font-weight: 600;
        transition: all 0.3s ease;
        flex-shrink: 0;
    }

    .remove-prize:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
    }

    .add-prize {
        background: linear-gradient(135deg, #10B981 0%, #059669 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 12px 24px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .add-prize:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
    }

    /* Winner Group Design */
    .winner-group {
        margin-bottom: 24px;
        padding: 20px;
        background: white;
        border-radius: 12px;
        border: 2px solid #E5E7EB;
        transition: all 0.3s ease;
        position: relative;
    }

    .winner-group:hover {
        border-color: #059669;
        box-shadow: 0 4px 12px rgba(5, 150, 105, 0.1);
    }

    .winner-group-header {
        display: flex;
        justify-content: between;
        align-items: center;
        margin-bottom: 16px;
        padding-bottom: 12px;
        border-bottom: 1px solid #E5E7EB;
    }

    .winner-group-title {
        background: linear-gradient(135deg, #059669 0%, #047857 100%);
        color: white;
        padding: 6px 12px;
        border-radius: 8px;
        font-weight: 700;
        font-size: 0.9rem;
        flex-shrink: 0;
    }

    .winner-group-time {
        flex: 1;
        margin: 0 12px;
    }

    .winner-group-time input {
        width: 100%;
        padding: 8px 12px;
        border: 2px solid #E5E7EB;
        border-radius: 8px;
        font-size: 0.9rem;
        transition: all 0.3s ease;
    }

    .winner-group-time input:focus {
        outline: none;
        border-color: #059669;
        box-shadow: 0 0 0 3px rgba(5, 150, 105, 0.1);
    }

    .remove-winner-group {
        background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 6px 10px;
        cursor: pointer;
        font-size: 0.75rem;
        font-weight: 600;
        transition: all 0.3s ease;
        flex-shrink: 0;
    }

    .remove-winner-group:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
    }

    /* Winner Number Item Design */
    .winner-number-item {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 12px;
        padding: 12px;
        background: #F8FAFC;
        border-radius: 8px;
        border: 1px solid #E2E8F0;
        transition: all 0.3s ease;
    }

    .winner-number-item:hover {
        border-color: #3B82F6;
        box-shadow: 0 2px 8px rgba(59, 130, 246, 0.1);
    }

    .winner-prize-select {
        padding: 8px 12px;
        border: 2px solid #E5E7EB;
        border-radius: 6px;
        font-size: 0.9rem;
        transition: all 0.3s ease;
        min-width: 120px;
        background: white;
    }

    .winner-prize-select:focus {
        outline: none;
        border-color: #3B82F6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .winner-ticket-input {
        flex: 1;
        padding: 8px 12px;
        border: 2px solid #E5E7EB;
        border-radius: 6px;
        font-size: 0.9rem;
        transition: all 0.3s ease;
        font-family: "ui-monospace", "SFMono-Regular", "Menlo", "Monaco", "Consolas", "Liberation Mono", "Courier New", "monospace";
        letter-spacing: 1px;
    }

    .winner-ticket-input:focus {
        outline: none;
        border-color: #059669;
        box-shadow: 0 0 0 3px rgba(5, 150, 105, 0.1);
    }

    .remove-winner-number {
        background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
        color: white;
        border: none;
        border-radius: 6px;
        padding: 6px 8px;
        cursor: pointer;
        font-size: 0.75rem;
        font-weight: 600;
        transition: all 0.3s ease;
        flex-shrink: 0;
    }

    .remove-winner-number:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(239, 68, 68, 0.3);
    }

    .add-winner-number {
        background: linear-gradient(135deg, #3B82F6 0%, #2563EB 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 8px 16px;
        cursor: pointer;
        font-weight: 600;
        font-size: 0.85rem;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 6px;
        margin-top: 8px;
    }

    .add-winner-number:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    }

    .add-winner-group {
        background: linear-gradient(135deg, #059669 0%, #047857 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 12px 24px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 12px;
    }

    .add-winner-group:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(5, 150, 105, 0.3);
    }

    /* Toast notification */
    .toast {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 16px 24px;
        border-radius: 8px;
        color: white;
        font-weight: 600;
        z-index: 1100;
        transform: translateX(100%);
        transition: transform 0.3s ease;
    }

    .toast.show {
        transform: translateX(0);
    }

    .toast.success {
        background: linear-gradient(135deg, #10B981 0%, #059669 100%);
    }

    .toast.error {
        background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
    }

    /* Grid Layout for Form */
    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }

    .form-grid-full {
        grid-column: span 2;
    }

    /* Mobile Responsive Design */
    @media (max-width: 768px) {
        .modal-content {
            width: 95%;
            max-height: 95vh;
        }

        .modal-header {
            padding: 16px;
        }

        .modal-body {
            padding: 16px;
        }

        .form-grid {
            grid-template-columns: 1fr;
        }

        .form-grid-full {
            grid-column: span 1;
        }

        .prize-item {
            flex-wrap: wrap;
        }

        .prize-rank-display {
            min-width: 60px;
        }

        .winner-group-header {
            flex-wrap: wrap;
            gap: 8px;
        }

        .winner-number-item {
            flex-wrap: wrap;
            gap: 8px;
        }

        .form-actions {
            flex-direction: column;
        }
    }
</style>

<script>
     async function deleteLottery(id) {
      if (!confirm('Are you sure you want to delete this lottery? This action cannot be undone.')) {
        return;
      }

      try {
        const response = await fetch(`/api/lottery/${id}`, {
          method: 'DELETE'
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.message || 'Failed to delete lottery');
        }

        if (result.success) {
          showToast('Lottery deleted successfully!', 'success');
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          throw new Error(result.message || 'Delete lottery failed');
        }
      } catch (error) {
        console.error('Delete lottery error:', error);
        showToast('Failed to delete lottery: ' + error.message, 'error');
      }
    }

</script>

<script>
    let currentEditId = null;
    let prizeCounter = 1;
    let winnerGroupCounter = 0;

    // API Functions
    async function fetchAutoComplete() {
        try {
            const response = await fetch('/api/lottery-autocomplete');
            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.message || 'Failed to fetch auto-complete data');
            }

            if (result.success) {
                return result.data;
            } else {
                throw new Error(result.message || 'Auto-complete failed');
            }
        } catch (error) {
            console.error('Auto-complete error:', error);
            showToast('Failed to load auto-complete data: ' + error.message, 'error');
            return null;
        }
    }

    async function createLottery(lotteryData) {
        try {
            const response = await fetch('/api/lottery', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(lotteryData)
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.message || 'Failed to create lottery');
            }

            if (result.success) {
                showToast('Lottery created successfully!', 'success');
                closeModal();
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                throw new Error(result.message || 'Create lottery failed');
            }
        } catch (error) {
            console.error('Create lottery error:', error);
            showToast('Failed to create lottery: ' + error.message, 'error');
        }
    }

    async function updateLottery(id, lotteryData) {
        try {
            const response = await fetch(`/api/lottery/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(lotteryData)
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.message || 'Failed to update lottery');
            }

            if (result.success) {
                showToast('Lottery updated successfully!', 'success');
                closeModal();
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                throw new Error(result.message || 'Update lottery failed');
            }
        } catch (error) {
            console.error('Update lottery error:', error);
            showToast('Failed to update lottery: ' + error.message, 'error');
        }
    }

    async function getLotteryById(id) {
        try {
            const response = await fetch(`/api/lottery/${id}`);
            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.message || 'Failed to fetch lottery');
            }

            if (result.success) {
                return result.data;
            } else {
                throw new Error(result.message || 'Fetch lottery failed');
            }
        } catch (error) {
            console.error('Fetch lottery error:', error);
            showToast('Failed to load lottery data: ' + error.message, 'error');
            return null;
        }
    }

    // Modal Functions
    async function openCreateModal() {
        document.getElementById('modalTitle').textContent = 'Create New Lottery';
        document.getElementById('submitBtn').textContent = 'Create Lottery';
        document.getElementById('lotteryForm').reset();
        currentEditId = null;

        // Reset counters
        prizeCounter = 1;
        winnerGroupCounter = 0;

        // Clear and setup default prize
        const prizesContainer = document.getElementById('prizesContainer');
        prizesContainer.innerHTML = `
            <div class="prize-item">
                <div class="prize-rank-display">1st Prize</div>
                <input type="number" placeholder="Amount (â‚¹)" class="prize-amount-input" required min="0">
                <button type="button" class="remove-prize" onclick="removePrize(this)">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        `;

        // Clear winners container
        const winnersContainer = document.getElementById('winnersContainer');
        winnersContainer.innerHTML = '';

        // Load auto-complete data
        const autoCompleteData = await fetchAutoComplete();
        if (autoCompleteData) {
            document.getElementById('lotteryName').value = autoCompleteData.suggestedName || '';
            document.getElementById('lotteryName2').value = autoCompleteData.suggestedName2 || '';
            document.getElementById('drawNumber').value = autoCompleteData.nextDrawNumber || '';

            if (autoCompleteData.suggestedDate) {
                const date = new Date(autoCompleteData.suggestedDate);
                document.getElementById('drawDate').value = date.toISOString().slice(0, 16);
            }
        }

        document.getElementById('lotteryModal').classList.add('show');
    }

    async function editLottery(id) {
        const lotteryData = await getLotteryById(id);
        if (!lotteryData) return;

        document.getElementById('modalTitle').textContent = 'Edit Lottery';
        document.getElementById('submitBtn').textContent = 'Update Lottery';
        currentEditId = id;

        // Fill form with existing data
        document.getElementById('lotteryName').value = lotteryData.name || '';
        document.getElementById('lotteryName2').value = lotteryData.name2 || '';
        document.getElementById('drawNumber').value = lotteryData.drawNumber || '';

        if (lotteryData.drawDate) {
            const utcDate = new Date(lotteryData.drawDate);
            const dubaiOffset = (4 * 60 * 60 * 1000) ;
            const dubaiDate = new Date(utcDate.getTime()+dubaiOffset);
            const formattedIST = dubaiDate.toISOString().slice(0, 16);
            document.getElementById('drawDate').value = formattedIST;
        }

        // Fill prizes
        const prizesContainer = document.getElementById('prizesContainer');
        prizesContainer.innerHTML = '';
        prizeCounter = 0;

        if (lotteryData.prizes && lotteryData.prizes.length > 0) {
            lotteryData.prizes.forEach(prize => {
                prizeCounter++;
                const prizeDiv = document.createElement('div');
                prizeDiv.className = 'prize-item';
                prizeDiv.innerHTML = `
                    <div class="prize-rank-display">${getRankDisplay(prizeCounter)}</div>
                    <input type="number" placeholder="Amount (â‚¹)" class="prize-amount-input" required min="0" value="${prize.amount}">
                    <button type="button" class="remove-prize" onclick="removePrize(this)">
                        <i class="fas fa-trash"></i>
                    </button>
                `;
                prizesContainer.appendChild(prizeDiv);
            });
        } else {
            addPrize();
        }

        // Fill winner groups
        const winnersContainer = document.getElementById('winnersContainer');
        winnersContainer.innerHTML = '';
        winnerGroupCounter = 0;

        if (lotteryData.winners && lotteryData.winners.length > 0) {
            lotteryData.winners.forEach(winner => {
                winnerGroupCounter++;
                const winnerGroupDiv = createWinnerGroupElement(winnerGroupCounter);
                winnersContainer.appendChild(winnerGroupDiv);

                // Set result time
                if (winner.resultTime) {
                    const utcDate = new Date(winner.resultTime);
                    const istOffset = (5 * 60 * 60 * 1000) + (30 * 60 * 1000);
                    const istDate = new Date(utcDate.getTime() + istOffset);
                    const formattedIST = istDate.toISOString().slice(0, 16);
                    winnerGroupDiv.querySelector('.winner-group-time input').value = formattedIST;
                }

                // Add winning numbers
                if (winner.winNumbers && winner.winNumbers.length > 0) {
                    const winNumbersContainer = winnerGroupDiv.querySelector('.win-numbers-container');
                    winNumbersContainer.innerHTML = '';
                    
                    winner.winNumbers.forEach(winNumber => {
                        const winNumberDiv = createWinnerNumberElement(winnerGroupCounter);
                        winNumbersContainer.appendChild(winNumberDiv);
                        
                        const prizeSelect = winNumberDiv.querySelector('.winner-prize-select');
                        const ticketInput = winNumberDiv.querySelector('.winner-ticket-input');
                        
                        // FIXED: First populate options, then set value
                        updatePrizeRankOptions(winnerGroupCounter);
                        prizeSelect.value = winNumber.prizeRank || '';
                        ticketInput.value = winNumber.ticketNumber || '';
                    });
                }
                
                // FIXED: Update options after all winning numbers are added
                updatePrizeRankOptions(winnerGroupCounter);
            });
        }

        document.getElementById('lotteryModal').classList.add('show');
    }

    function closeModal() {
        document.getElementById('lotteryModal').classList.remove('show');
        currentEditId = null;
    }

    // Prize Management
    function addPrize() {
        prizeCounter++;
        const prizesContainer = document.getElementById('prizesContainer');
        const prizeDiv = document.createElement('div');
        prizeDiv.className = 'prize-item';
        prizeDiv.innerHTML = `
            <div class="prize-rank-display">${getRankDisplay(prizeCounter)}</div>
            <input type="number" placeholder="Amount (â‚¹)" class="prize-amount-input" required min="0">
            <button type="button" class="remove-prize" onclick="removePrize(this)">
                <i class="fas fa-trash"></i>
            </button>
        `;
        prizesContainer.appendChild(prizeDiv);
        updateAllPrizeRankOptions();
    }

    function removePrize(button) {
        const prizesContainer = document.getElementById('prizesContainer');
        if (prizesContainer.children.length > 1) {
            button.parentElement.remove();
            updatePrizeRanks();
            updateAllPrizeRankOptions();
        } else {
            showToast('At least one prize is required', 'error');
        }
    }

    function updatePrizeRanks() {
        const prizeItems = document.querySelectorAll('.prize-item');
        prizeCounter = 0;
        prizeItems.forEach(item => {
            prizeCounter++;
            item.querySelector('.prize-rank-display').textContent = getRankDisplay(prizeCounter);
        });
    }

    // Winner Group Management
    function addWinnerGroup() {
        winnerGroupCounter++;
        const winnersContainer = document.getElementById('winnersContainer');
        const winnerGroupDiv = createWinnerGroupElement(winnerGroupCounter);
        // winnersContainer.appendChild(winnerGroupDiv);
        winnersContainer.prepend(winnerGroupDiv);

        // Set default result time (2 hours after draw time)
        const drawDate = document.getElementById('drawDate').value;
        if (drawDate) {
            const drawDateTime = new Date(drawDate);
            drawDateTime.setHours(drawDateTime.getHours() + 2);
            winnerGroupDiv.querySelector('.winner-group-time input').value = drawDateTime.toISOString().slice(0, 16);
        }

        // Add first winning number
        addWinnerNumber(winnerGroupCounter);
    }

    function createWinnerGroupElement(groupIndex) {
        const winnerGroupDiv = document.createElement('div');
        winnerGroupDiv.className = 'winner-group';
        winnerGroupDiv.dataset.groupIndex = groupIndex;
        winnerGroupDiv.innerHTML = `
            <div class="winner-group-header">
                <div class="winner-group-title">Group ${groupIndex}</div>
                <div class="winner-group-time">
                    <input type="datetime-local" placeholder="Result Time" required>
                </div>
                <button type="button" class="remove-winner-group" onclick="removeWinnerGroup(${groupIndex})">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
            <div class="win-numbers-container"></div>
            <button type="button" class="add-winner-number" onclick="addWinnerNumber(${groupIndex})">
                <i class="fas fa-plus"></i>
                Add Winning Number
            </button>
        `;
        return winnerGroupDiv;
    }

    function removeWinnerGroup(groupIndex) {
        const winnerGroup = document.querySelector(`[data-group-index="${groupIndex}"]`);
        if (winnerGroup) {
            winnerGroup.remove();
            updateWinnerGroupNumbers();
        }
    }

    function updateWinnerGroupNumbers() {
        const winnerGroups = document.querySelectorAll('.winner-group');
        winnerGroupCounter = 0;
        winnerGroups.forEach(group => {
            winnerGroupCounter++;
            group.dataset.groupIndex = winnerGroupCounter;
            group.querySelector('.winner-group-title').textContent = `Group ${winnerGroupCounter}`;
            
            // Update button onclick handlers
            group.querySelector('.remove-winner-group').setAttribute('onclick', `removeWinnerGroup(${winnerGroupCounter})`);
            group.querySelector('.add-winner-number').setAttribute('onclick', `addWinnerNumber(${winnerGroupCounter})`);
            
            // Update winning number remove buttons
            const winnerNumbers = group.querySelectorAll('.winner-number-item');
            winnerNumbers.forEach((numberItem, numberIndex) => {
                numberItem.querySelector('.remove-winner-number').setAttribute('onclick', `removeWinnerNumber(${winnerGroupCounter}, ${numberIndex})`);
            });
        });
    }

    // Winner Number Management
    function addWinnerNumber(groupIndex) {
        const winnerGroup = document.querySelector(`[data-group-index="${groupIndex}"]`);
        if (!winnerGroup) return;

        const winNumbersContainer = winnerGroup.querySelector('.win-numbers-container');
        const numberIndex = winNumbersContainer.children.length;
        const winnerNumberDiv = createWinnerNumberElement(groupIndex, numberIndex);
        winNumbersContainer.appendChild(winnerNumberDiv);
        updatePrizeRankOptions(groupIndex);
    }

    function createWinnerNumberElement(groupIndex, numberIndex = 0) {
        const winnerNumberDiv = document.createElement('div');
        winnerNumberDiv.className = 'winner-number-item';
        winnerNumberDiv.innerHTML = `
            <select class="winner-prize-select" required>
                <option value="">Select Prize</option>
            </select>
            <input type="text" placeholder="Ticket Number" class="winner-ticket-input" required>
            <button type="button" class="remove-winner-number" onclick="removeWinnerNumber(${groupIndex}, ${numberIndex})">
                <i class="fas fa-trash"></i>
            </button>
        `;
        return winnerNumberDiv;
    }

    function removeWinnerNumber(groupIndex, numberIndex) {
        const winnerGroup = document.querySelector(`[data-group-index="${groupIndex}"]`);
        if (!winnerGroup) return;

        const winNumbersContainer = winnerGroup.querySelector('.win-numbers-container');
        const winnerNumbers = winNumbersContainer.querySelectorAll('.winner-number-item');
        
        if (winnerNumbers.length > 1) {
            winnerNumbers[numberIndex].remove();
            updateWinnerNumberIndices(groupIndex);
            updatePrizeRankOptions(groupIndex);
        } else {
            showToast('At least one winning number is required per group', 'error');
        }
    }

    function updateWinnerNumberIndices(groupIndex) {
        const winnerGroup = document.querySelector(`[data-group-index="${groupIndex}"]`);
        if (!winnerGroup) return;

        const winnerNumbers = winnerGroup.querySelectorAll('.winner-number-item');
        winnerNumbers.forEach((numberItem, numberIndex) => {
            numberItem.querySelector('.remove-winner-number').setAttribute('onclick', `removeWinnerNumber(${groupIndex}, ${numberIndex})`);
        });
    }

    function updatePrizeRankOptions(groupIndex) {
        const winnerGroup = document.querySelector(`[data-group-index="${groupIndex}"]`);
        if (!winnerGroup) return;

        const prizeSelects = winnerGroup.querySelectorAll('.winner-prize-select');
        const prizeItems = document.querySelectorAll('.prize-item');
        
        // Get selected values in this group
        const selectedValues = Array.from(prizeSelects).map(select => select.value).filter(val => val);
        
        prizeSelects.forEach(select => {
            const currentValue = select.value;
            select.innerHTML = '<option value="">Select Prize</option>';
            
            prizeItems.forEach((item, index) => {
                const rank = index + 1;
                const rankDisplay = getRankDisplay(rank);
                const isSelected = selectedValues.includes(rank.toString()) && currentValue !== rank.toString();
                
                if (!isSelected) {
                    const option = document.createElement('option');
                    option.value = rank;
                    option.textContent = rankDisplay;
                    select.appendChild(option);
                }
            });
            
            select.value = currentValue;
        });
    }

    function updateAllPrizeRankOptions() {
        const winnerGroups = document.querySelectorAll('.winner-group');
        winnerGroups.forEach(group => {
            const groupIndex = group.dataset.groupIndex;
            updatePrizeRankOptions(groupIndex);
        });
    }

    // Helper Functions
    function getRankDisplay(rank) {
        const suffixes = ['th', 'st', 'nd', 'rd'];
        const v = rank % 100;
        return rank + (suffixes[(v - 20) % 10] || suffixes[v] || suffixes[0]) + ' Prize';
    }

    // Form Submission
    document.getElementById('lotteryForm').addEventListener('submit', function(e) {
        e.preventDefault();

        // Date conversion before sending to server
        const selectedDateTimeLocalString = document.getElementById('drawDate').value;
        let drawDateUTC;

        if (selectedDateTimeLocalString) {
            const intendedBTTMoment = moment.tz(selectedDateTimeLocalString, 'YYYY-MM-DDTHH:mm', 'Asia/Dubai');
            drawDateUTC = intendedBTTMoment.utc().toISOString();
        } else {
            console.error("Draw Date/Time is required.");
            return;
        }

        const formData = {
            name: document.getElementById('lotteryName').value,
            name2: document.getElementById('lotteryName2').value || '',
            drawNumber: parseInt(document.getElementById('drawNumber').value),
            drawDate: drawDateUTC,
            prizes: [],
            winners: []
        };

        // Collect prizes
        const prizeItems = document.querySelectorAll('.prize-item');
        prizeItems.forEach((item, index) => {
            const amount = parseInt(item.querySelector('.prize-amount-input').value);
            if (amount) {
                formData.prizes.push({
                    rank: index + 1,
                    amount: amount
                });
            }
        });

        // Collect winner groups
        const winnerGroups = document.querySelectorAll('.winner-group');
        winnerGroups.forEach(group => {
            const resultTimeInput = group.querySelector('.winner-group-time input').value;
            if (!resultTimeInput) return;

            let resultTimeUTC;
            const intendedBTTMoment = moment.tz(resultTimeInput, 'YYYY-MM-DDTHH:mm', 'Asia/Dubai');
            resultTimeUTC = intendedBTTMoment.utc().toISOString();

            const winNumbers = [];
            const winnerNumbers = group.querySelectorAll('.winner-number-item');
            
            winnerNumbers.forEach(numberItem => {
                const prizeRank = parseInt(numberItem.querySelector('.winner-prize-select').value);
                const ticketNumber = numberItem.querySelector('.winner-ticket-input').value.trim();
                
                if (prizeRank && ticketNumber) {
                    winNumbers.push({
                        prizeRank: prizeRank,
                        ticketNumber: ticketNumber
                    });
                }
            });

            if (winNumbers.length > 0) {
                formData.winners.push({
                    resultTime: resultTimeUTC,
                    winNumbers: winNumbers
                });
            }
        });

        // Validate
        if (formData.prizes.length === 0) {
            showToast('Please add at least one prize', 'error');
            return;
        }

        // Submit
        if (currentEditId) {
            updateLottery(currentEditId, formData);
        } else {
            createLottery(formData);
        }
    });

    // Toast Function
    function showToast(message, type) {
        const toast = document.getElementById('toast');
        toast.textContent = message;
        toast.className = `toast ${type}`;
        toast.classList.add('show');

        setTimeout(() => {
            toast.classList.remove('show');
        }, 3000);
    }

    // Close modal when clicking outside
    document.getElementById('lotteryModal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeModal();
        }
    });

    // Make functions globally available
    window.openCreateModal = openCreateModal;
    window.editLottery = editLottery;
    window.closeModal = closeModal;
    window.addPrize = addPrize;
    window.removePrize = removePrize;
    window.addWinnerGroup = addWinnerGroup;
    window.removeWinnerGroup = removeWinnerGroup;
    window.addWinnerNumber = addWinnerNumber;
    window.removeWinnerNumber = removeWinnerNumber;
</script>