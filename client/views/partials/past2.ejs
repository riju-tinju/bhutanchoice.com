<!-- Past Results -->
<section>
  <% if(past && past.length>0){ %>
  <div class="flex items-center justify-between mb-6">
    <h2 class="text-xl font-bold section-title flex items-center">
      <i class="fas fa-history text-purple-500 mr-2 text-xl"></i>
      View All Results
    </h2>
  </div>

  <div class="space-y-5" id="past-lottories-container">

    <% for(let i=0; i < past.length; i++) { %>
    <div class="lottery-card <%= past[i].dayName %>-card cursor-pointer" onclick="toggleResult('past<%= i %>')">
      <div class="flex items-center justify-between">
        <div class="flex-1 card-element-spacing">
          <div class="flex items-center flex-wrap" style="row-gap: 9px; column-gap: 20px;">
            <span class="past-badge rounded-full">RESULT</span>
            <span class="card-text-secondary card-date">
              <%
const drawDate = new Date(past[i].drawDate);
const formattedDate = drawDate.toLocaleDateString('en-GB', {
  year: 'numeric',
  day: '2-digit',
  hour: '2-digit',
  month: 'short',
  minute: '2-digit',
  hour12: true,
  timeZone: 'Asia/Kolkata'
}).replace(',', '');
%>
              <%= formattedDate %>
            </span>
          </div>
          <h3 class="card-text card-lottery-name">
            <%= past[i].name %><br><%= past[i].name2 %>
          </h3>

          <!-- Display all prizes -->
          <% past[i].prizes.forEach(prize => { %>
          <div class="flex items-center card-text-secondary">
            <i class="fas fa-trophy text-yellow-300 mr-2"></i>
            <span class="card-prize">
              <%= prize.rank %> Prize: â‚¹<%= prize.amount.toLocaleString('en-IN') %>
            </span><br>
          </div>
          <% }); %>

        </div>
        <div class="text-right ml-4">
          <i id="arrow-past<%= i %>" class="fas fa-chevron-down card-text text-xl transition-transform duration-300"></i>
        </div>
      </div>

      <div id="past<%= i %>" class="card-expand collapsed mt-6">
        <div class="result-container space-y-4">
          <% past[i].winners.forEach((winner, winnerIndex) => { %>
          <% 
            // Format the time to 12-hour format with AM/PM
            const resultTime = new Date(winner.resultTime);
            const hours = resultTime.getHours();
            const minutes = resultTime.getMinutes();
            const ampm = hours >= 12 ? 'PM' : 'AM';
            const formattedHours = hours % 12 || 12;
            const formattedTime = `${formattedHours}:${minutes.toString().padStart(2, '0')} ${ampm}`;
          %>

          <div class="result-card">
            <div class="result-card-header">
              <%= formattedTime %>
            </div>
            <div class="result-card-content">
              <div class="result-prize-amount">A B C</div>
              
              <% if(winner.winNumbers && winner.winNumbers.length > 0) { %>
                <div class="result-winning-numbers">
                  <% winner.winNumbers.forEach((winNumber, numberIndex) => { %>
                    <div class="animated-number-container" 
                         data-number="<%= winNumber.ticketNumber %>" 
                         data-delay="<%= (winnerIndex * 300) + (numberIndex * 200) %>">
                      <!-- Animated digits will be populated by JavaScript -->
                    </div>
                  <% }); %>
                </div>
              <% } else { %>
                <div class="result-winning-number result-winning-number_if_no_results">
                  <div class="no-results-animation">
                    <div class="loading-dots">
                      <span></span><span></span><span></span>
                    </div>
                    <div class="loading-text">Awaiting Results</div>
                  </div>
                </div>
              <% } %>
            </div>
          </div>
          <% }); %>
        </div>
      </div>
    </div>
    <% } %>

    <!-- Load More Button -->
    <button onclick="getPastLottories()" class="load-more-btn w-full text-white py-4 font-semibold flex items-center justify-center space-x-2" id="loadmoreBtn">
      <i class="fas fa-plus"></i>
      <span>Load More Results</span>
    </button>
    <% } %>

    <!-- Disclaimer Button -->
    <div class="text-center py-4 px-4">
      <button id="disclaimerBtn" class="text-sm text-gray-500 hover:text-blue-500 transition-colors duration-300 underline">
        View Disclaimer
      </button>
    </div>

    <!-- Copyright -->
    <div class="text-center text-xs text-gray-400 pb-6 px-4">
      &copy; 2018 bhutanlotteryresults.com<br>All rights reserved.
    </div>
  </div>
</section>

<script>
  // Toggle Result Function
  function toggleResult(id) {
    const element = document.getElementById(id);
    const arrow = document.getElementById('arrow-' + id);

    element.classList.toggle('collapsed');
    arrow.classList.toggle('fa-chevron-down');
    arrow.classList.toggle('fa-chevron-up');
    
    // Initialize animations when expanding
    if (!element.classList.contains('collapsed')) {
      setTimeout(() => {
        initializeAnimatedNumbers();
      }, 300); // Wait for expand animation
    }
  }

  // Animated Number Counter
  function initializeAnimatedNumbers() {
    const containers = document.querySelectorAll('.animated-number-container:not(.initialized)');
    
    containers.forEach(container => {
      const number = container.dataset.number;
      const delay = parseInt(container.dataset.delay) || 0;
      
      if (number) {
        container.classList.add('initialized'); // Prevent re-initialization
        createDigitBoxes(container, number, delay);
      }
    });
  }

  function createDigitBoxes(container, number, delay) {
    const digits = number.toString().split('');
    
    // Clear container first
    container.innerHTML = '';
    
    digits.forEach((digit, index) => {
      const digitBox = document.createElement('div');
      digitBox.className = 'digit-box';
      digitBox.textContent = '0';
      container.appendChild(digitBox);
      
      // Start animation after delay
      setTimeout(() => {
        animateDigit(digitBox, parseInt(digit), index * 100);
      }, delay);
    });
  }

  function animateDigit(digitBox, targetDigit, delay) {
    setTimeout(() => {
      digitBox.classList.add('animating');
      
      let currentDigit = 0;
      const duration = 800;
      const steps = Math.max(10, targetDigit * 2);
      const stepDuration = duration / steps;
      
      const animate = () => {
        if (currentDigit <= targetDigit) {
          digitBox.textContent = currentDigit;
          
          if (currentDigit === targetDigit) {
            digitBox.classList.remove('animating');
            digitBox.classList.add('completed');
            return;
          }
          
          currentDigit++;
          setTimeout(animate, stepDuration);
        }
      };
      
      animate();
    }, delay);
  }

  // Get Past Lotteries Function
  let currentPageNumber = 1;

  async function getPastLotteries() {
    try {
      const response = await fetch('/api/get-past-lotteries', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          page: currentPageNumber + 1
        })
      });

      if (!response.ok) {
        throw new Error(`Server responded with status ${response.status}`);
      }

      const result = await response.json();
      console.log(result)
      if (!result.success) {
        throw new Error(result.message || 'Unknown error occurred');
      }
      currentPageNumber += 1;

      const pastLotteries = result.items;
      console.log(pastLotteries)
      renderPastResults(pastLotteries);

      return
    } catch (err) {
      console.error('Failed to load past lotteries:', err.message);
      return
    }
  }

  // Enhanced renderPastResults function with animation support
  function renderPastResults(pastLotteries) {
    const container = document.getElementById('past-lotteries-container');
    if (!container) return;

    pastLotteries.forEach((lottery, i) => {
      const drawDate = new Date(lottery.drawDate);
      const formattedDate = drawDate.toLocaleDateString('en-GB', {
        year: 'numeric',
        day: '2-digit',
        hour: '2-digit',
        month: 'short',
        minute: '2-digit',
        hour12: true,
        timeZone: 'Asia/Kolkata'
      }).replace(',', '');

      const elementId = `past-${lottery._id}`;

      const card = document.createElement('div');
      card.className = `lottery-card ${lottery.dayName}-card cursor-pointer`;
      card.setAttribute('onclick', `toggleResult('${elementId}')`);

      // Generate winners HTML with animated counters
      let winnersHTML = '';
      if (lottery.winners && lottery.winners.length > 0) {
        lottery.winners.forEach((winner, winnerIndex) => {
          const resultTime = new Date(winner.resultTime);
          const hours = resultTime.getHours();
          const minutes = resultTime.getMinutes();
          const ampm = hours >= 12 ? 'PM' : 'AM';
          const formattedHours = hours % 12 || 12;
          const formattedTime = `${formattedHours}:${minutes.toString().padStart(2, '0')} ${ampm}`;

          winnersHTML += `
            <div class="result-card">
              <div class="result-card-header">${formattedTime}</div>
              <div class="result-card-content">
                <div class="result-prize-amount">A B C</div>`;

          if (winner.winNumbers && winner.winNumbers.length > 0) {
            winnersHTML += '<div class="result-winning-numbers">';
            winner.winNumbers.forEach((winNumber, numberIndex) => {
              winnersHTML += `
                <div class="animated-number-container" 
                     data-number="${winNumber.ticketNumber}" 
                     data-delay="${(winnerIndex * 300) + (numberIndex * 200)}">
                </div>`;
            });
            winnersHTML += '</div>';
          } else {
            winnersHTML += `
              <div class="result-winning-number result-winning-number_if_no_results">
                <div class="no-results-animation">
                  <div class="loading-dots">
                    <span></span><span></span><span></span>
                  </div>
                  <div class="loading-text">Awaiting Results</div>
                </div>
              </div>`;
          }

          winnersHTML += `
              </div>
            </div>`;
        });
      }

      // Generate prizes HTML
      let prizesHTML = '';
      if (lottery.prizes && lottery.prizes.length > 0) {
        lottery.prizes.forEach(prize => {
          prizesHTML += `
            <div class="flex items-center card-text-secondary">
              <i class="fas fa-trophy text-yellow-300 mr-2"></i>
              <span class="card-prize">
                ${prize.rank} Prize: â‚¹${prize.amount.toLocaleString('en-IN')}
              </span><br>
            </div>`;
        });
      }

      card.innerHTML = `
        <div class="flex items-center justify-between">
          <div class="flex-1 card-element-spacing">
            <div class="flex items-center flex-wrap" style="row-gap: 9px; column-gap: 20px;">
              <span class="past-badge rounded-full">RESULT</span>
              <span class="card-text-secondary card-date">${formattedDate}</span>
            </div>
            <h3 class="card-text card-lottery-name">
              ${lottery.name}<br>${lottery.name2 || ''}
            </h3>
            ${prizesHTML}
          </div>
          <div class="text-right ml-4">
            <i id="arrow-${elementId}" class="fas fa-chevron-down card-text text-xl transition-transform duration-300"></i>
          </div>
        </div>

        <div id="${elementId}" class="card-expand collapsed mt-6">
          <div class="result-container space-y-4">
            ${winnersHTML}
          </div>
        </div>
      `;

      let loadmoreBtn = document.getElementById('loadmoreBtn');
      loadmoreBtn.insertAdjacentElement('beforebegin', card);
    });
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', function() {
    // Don't initialize here as cards are collapsed initially
  });

  // Re-initialize when new content is loaded (for dynamic content)
  function reinitializeAnimatedNumbers() {
    initializeAnimatedNumbers();
  }
</script>