<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Agent Settings - Bhutan State Lotteries</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css" />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800&display=swap"
      rel="stylesheet"
    />
    <style>
      * {
        font-family: 'Poppins', sans-serif;
      }

      * {
        -webkit-tap-highlight-color: transparent;
      }

      body {
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        min-height: 100vh;
      }

      .app-header {
        background: linear-gradient(135deg, #ff6b6b 0%, #6a82fb 50%, #45eba5 100%);
        background-size: 300% 300%;
        animation: gradientShift 6s ease infinite;
      }

      @keyframes gradientShift {
        0% {
          background-position: 0% 50%;
        }

        50% {
          background-position: 100% 50%;
        }

        100% {
          background-position: 0% 50%;
        }
      }

      .settings-card {
        border-radius: 20px;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        position: relative;
        overflow: hidden;
        background: white;
        padding: 28px;
        margin-bottom: 24px;
      }

      .settings-card::before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        width: 6px;
        height: 100%;
        background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
        border-radius: 20px 0 0 20px;
      }

      .settings-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
      }

      .section-title {
        background: linear-gradient(135deg, #374151 0%, #4b5563 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        font-weight: 800;
        font-size: 1.5rem;
        margin-bottom: 24px;
        display: flex;
        align-items: center;
      }

      .section-title i {
        margin-right: 12px;
        color: #3b82f6;
        -webkit-text-fill-color: #3b82f6;
      }

      .form-group {
        margin-bottom: 24px;
      }

      .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: #374151;
        font-size: 0.95rem;
      }

      .form-input {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-size: 1rem;
        transition: all 0.3s ease;
        font-family: inherit;
      }

      .form-input:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
      }

      .form-input.error {
        border-color: #ef4444;
        box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
      }

      .form-input.success {
        border-color: #10b981;
        box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);
      }

      .btn {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 0.95rem;
        display: inline-flex;
        align-items: center;
        gap: 8px;
      }

      .btn-primary {
        background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
        color: white;
      }

      .btn-primary:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
      }

      .btn-success {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
      }

      .btn-success:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
      }

      .btn-secondary {
        background: #e5e7eb;
        color: #374151;
      }

      .btn-secondary:hover {
        background: #d1d5db;
        transform: translateY(-1px);
      }

      .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
      }

      .password-strength {
        margin-top: 8px;
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 0.875rem;
        font-weight: 500;
        display: none;
      }

      .password-strength.weak {
        background: #fef2f2;
        color: #dc2626;
        border: 1px solid #fecaca;
        display: block;
      }

      .password-strength.medium {
        background: #fffbeb;
        color: #d97706;
        border: 1px solid #fed7aa;
        display: block;
      }

      .password-strength.strong {
        background: #f0fdf4;
        color: #059669;
        border: 1px solid #bbf7d0;
        display: block;
      }

      .password-toggle {
        position: absolute;
        right: 10px;
        top: 16px;
        color: #6b7280;
        cursor: pointer;
        font-size: 1.1rem;
        transition: color 0.3s ease;
      }

      .password-toggle:hover {
        color: #3b82f6;
      }

      .toast {
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 16px 24px;
        border-radius: 8px;
        color: white;
        font-weight: 600;
        z-index: 1100;
        transform: translateX(100%);
        transition: transform 0.3s ease;
        max-width: 400px;
      }

      .toast.show {
        transform: translateX(0);
      }

      .toast.success {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
      }

      .toast.error {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
      }

      .toast.info {
        background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
      }

      .loading-spinner {
        display: inline-block;
        width: 16px;
        height: 16px;
        border: 2px solid transparent;
        border-top: 2px solid currentColor;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }

        100% {
          transform: rotate(360deg);
        }
      }

      .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
      }

      .form-grid-full {
        grid-column: span 2;
      }

      .bounce-in {
        animation: bounceIn 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);
      }

      @keyframes bounceIn {
        0% {
          transform: scale(0.3) translateY(50px);
          opacity: 0;
        }

        50% {
          transform: scale(1.05) translateY(-10px);
          opacity: 0.8;
        }

        70% {
          transform: scale(0.95) translateY(0px);
          opacity: 0.9;
        }

        100% {
          transform: scale(1) translateY(0px);
          opacity: 1;
        }
      }

      /* Mobile Responsive Design */
      @media (max-width: 768px) {
        .settings-card {
          padding: 20px;
          margin-bottom: 20px;
        }

        .section-title {
          font-size: 1.25rem;
        }

        .form-grid {
          grid-template-columns: 1fr;
        }

        .form-grid-full {
          grid-column: span 1;
        }

        .btn {
          width: 100%;
          justify-content: center;
          margin-bottom: 12px;
        }

        .toast {
          right: 10px;
          left: 10px;
          max-width: none;
          transform: translateY(-100%);
        }

        .toast.show {
          transform: translateY(0);
        }
      }
    </style>
  </head>

  <body>
    <main class="px-4 py-6 space-y-8 max-w-4xl mx-auto">
      <!-- Agent Account Settings Section -->
      <section class="settings-card">
        <h2 class="section-title">
          <i class="fas fa-user-shield"></i>
          Agent Account Settings
        </h2>

        <form id="agentForm">
          <div class="form-grid">
            <div class="form-group">
              <label class="form-label">
                <i class="fas fa-user mr-2"></i>
                Agent Name
              </label>
              <input type="text" id="agentName" class="form-input" placeholder="Enter agent name" required />
            </div>

            <div class="form-group">
              <label class="form-label">
                <i class="fas fa-envelope mr-2"></i>
                Agent Email
              </label>
              <input type="email" id="agentEmail" class="form-input" placeholder="Enter agent email" required />
            </div>

            <div class="form-group">
              <label class="form-label">
                <i class="fas fa-lock mr-2"></i>
                Current Password
              </label>
              <div style="display: flex; position: relative">
                <input type="password" id="currentPassword" class="form-input" placeholder="Enter current password" />
                <i
                  data-target="currentPassword"
                  class="fas fa-eye password-toggle"
                  style="position: absolute; right: 10px; top: 16px"
                ></i>
              </div>
            </div>

            <div class="form-group">
              <label class="form-label">
                <i class="fas fa-key mr-2"></i>
                New Password
              </label>
              <div style="display: flex; position: relative">
                <input
                  type="password"
                  id="newPassword"
                  class="form-input password-input"
                  placeholder="Enter new password"
                />
                <i
                  class="fas fa-eye password-toggle"
                  style="position: absolute; right: 10px; top: 16px"
                  data-target="newPassword"
                ></i>
              </div>
              <div class="password-strength" id="passwordStrength"></div>
            </div>

            <div class="form-group form-grid-full">
              <label class="form-label">
                <i class="fas fa-check-circle mr-2"></i>
                Confirm New Password
              </label>
              <div style="display: flex; position: relative">
                <input
                  type="password"
                  id="confirmPassword"
                  class="form-input password-input"
                  placeholder="Confirm new password"
                />
                <i
                  class="fas fa-eye password-toggle"
                  style="position: absolute; right: 10px; top: 16px"
                  data-target="confirmPassword"
                ></i>
              </div>
            </div>
          </div>

          <div class="flex flex-wrap justify-end" style="column-gap: 16px">
            <button type="button" class="btn btn-secondary" onclick="resetAgentForm()">
              <i class="fas fa-undo"></i>
              Reset
            </button>
            <button type="submit" class="btn btn-success" id="saveAgentBtn">
              <i class="fas fa-shield-alt"></i>
              Update Agent Settings
            </button>
          </div>
        </form>
      </section>
    </main>

    <!-- Toast Notification -->
    <div id="toast" class="toast"></div>

    <script>
      // Global variables
      let currentAgentSettings = {};

      // Initialize page
      document.addEventListener('DOMContentLoaded', function () {
        initializePage();
        setupEventListeners();
        loadAgentSettings();
      });

      // Initialize page animations
      function initializePage() {
        const cards = document.querySelectorAll('.settings-card');
        cards.forEach((card, index) => {
          setTimeout(() => {
            card.classList.add('bounce-in');
          }, index * 200);
        });
      }

      // Setup event listeners
      function setupEventListeners() {
        // Form submissions
        document.getElementById('agentForm').addEventListener('submit', handleAgentSubmit);

        // Password strength
        document.getElementById('newPassword').addEventListener('input', checkPasswordStrength);
        document.getElementById('confirmPassword').addEventListener('input', checkPasswordMatch);
      }

      // API Functions - Agent Settings
      async function loadAgentSettings() {
        try {
          const response = await fetch('/api/agent/settings');
          const result = await response.json();

          if (!response.ok) {
            throw new Error(result.message || 'Failed to load agent settings');
          }

          if (result.success) {
            currentAgentSettings = result.data;
            populateAgentForm(result.data);
          } else {
            throw new Error(result.message || 'Failed to load agent settings');
          }
        } catch (error) {
          console.error('Load agent settings error:', error);
          showToast('Failed to load agent settings: ' + error.message, 'error');
        }
      }

      async function saveAgentSettings(agentData) {
        try {
          const response = await fetch('/api/agent/settings', {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(agentData),
          });

          const result = await response.json();

          if (!response.ok) {
            throw new Error(result.message || 'Failed to save agent settings');
          }

          if (result.success) {
            showToast('Agent settings updated successfully!', 'success');
            currentAgentSettings = result.data;
            return true;
          } else {
            throw new Error(result.message || 'Failed to save agent settings');
          }
        } catch (error) {
          console.error('Save agent settings error:', error);
          showToast('Failed to save agent settings: ' + error.message, 'error');
          return false;
        }
      }

      // Form population functions
      function populateAgentForm(data) {
        document.getElementById('agentName').value = data.name || '';
        document.getElementById('agentEmail').value = data.email || '';
        // Note: Never populate password fields for security
      }

      // Form submission handlers
      async function handleAgentSubmit(event) {
        event.preventDefault();

        const submitBtn = document.getElementById('saveAgentBtn');
        const originalText = submitBtn.innerHTML;

        // Show loading state
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<div class="loading-spinner"></div> Updating...';

        try {
          const agentData = {
            name: document.getElementById('agentName').value,
            email: document.getElementById('agentEmail').value,
          };

          const currentPassword = document.getElementById('currentPassword').value;
          const newPassword = document.getElementById('newPassword').value;
          const confirmPassword = document.getElementById('confirmPassword').value;

          // Add password data if provided
          if (currentPassword) {
            if (newPassword !== confirmPassword) {
              showToast('New passwords do not match', 'error');
              return;
            }

            agentData.currentPassword = currentPassword;
            if (newPassword) {
              agentData.newPassword = newPassword;
            }
          }

          const success = await saveAgentSettings(agentData);

          if (success) {
            // Clear password fields
            document.getElementById('currentPassword').value = '';
            document.getElementById('newPassword').value = '';
            document.getElementById('confirmPassword').value = '';
            document.getElementById('passwordStrength').style.display = 'none';
          }
        } finally {
          // Restore button state
          submitBtn.disabled = false;
          submitBtn.innerHTML = originalText;
        }
      }

      // Password strength checker
      function checkPasswordStrength() {
        const password = document.getElementById('newPassword').value;
        const strengthDiv = document.getElementById('passwordStrength');

        if (!password) {
          strengthDiv.style.display = 'none';
          return;
        }

        let strength = 0;
        let feedback = '';

        // Check length
        if (password.length >= 8) strength++;
        // Check for lowercase
        if (/[a-z]/.test(password)) strength++;
        // Check for uppercase
        if (/[A-Z]/.test(password)) strength++;
        // Check for numbers
        if (/\d/.test(password)) strength++;
        // Check for special characters
        if (/[!@#$%^&*(),.?":{}|<>]/.test(password)) strength++;

        strengthDiv.className = 'password-strength';

        if (strength < 3) {
          strengthDiv.classList.add('weak');
          feedback = 'Weak password. Use 8+ characters with mixed case, numbers, and symbols.';
        } else if (strength < 5) {
          strengthDiv.classList.add('medium');
          feedback = 'Medium strength. Consider adding more character types.';
        } else {
          strengthDiv.classList.add('strong');
          feedback = 'Strong password!';
        }

        strengthDiv.textContent = feedback;
      }

      function checkPasswordMatch() {
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        const confirmInput = document.getElementById('confirmPassword');

        if (confirmPassword && newPassword !== confirmPassword) {
          confirmInput.classList.add('error');
          confirmInput.classList.remove('success');
        } else if (confirmPassword && newPassword === confirmPassword) {
          confirmInput.classList.add('success');
          confirmInput.classList.remove('error');
        } else {
          confirmInput.classList.remove('error', 'success');
        }
      }

      // Utility functions
      function resetAgentForm() {
        document.getElementById('agentForm').reset();
        populateAgentForm(currentAgentSettings);
        document.getElementById('passwordStrength').style.display = 'none';

        // Remove validation classes
        const inputs = document.querySelectorAll('#agentForm .form-input');
        inputs.forEach((input) => {
          input.classList.remove('error', 'success');
        });
      }

      function showToast(message, type) {
        const toast = document.getElementById('toast');
        toast.textContent = message;
        toast.className = `toast ${type}`;
        toast.classList.add('show');

        setTimeout(() => {
          toast.classList.remove('show');
        }, 4000);
      }

      // Password visibility toggle
      document.querySelectorAll('.password-toggle').forEach((toggle) => {
        toggle.addEventListener('click', function () {
          const inputId = this.getAttribute('data-target');
          const input = document.getElementById(inputId);

          if (input) {
            const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
            input.setAttribute('type', type);

            this.classList.toggle('fa-eye');
            this.classList.toggle('fa-eye-slash');
          }
        });
      });
    </script>

    <%- include('../../partials/Footer') %>
  </body>
</html>