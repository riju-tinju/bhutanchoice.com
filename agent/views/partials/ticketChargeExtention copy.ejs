<!-- Ticket Charges Management Modal -->
<div class="custom-modal-overlay" id="ticketChargesModalOverlay" style="display: none;">
  <div class="custom-modal">
    <div class="custom-modal-content">
      <div class="custom-modal-header">
        <h5 class="custom-modal-title">
          <i class="fas fa-tags me-2"></i>Ticket Charges Management
        </h5>
        <button type="button" class="custom-close-btn" onclick="closeTicketChargesModal()">&times;</button>
      </div>
      
      <div class="custom-modal-body">
        <!-- Loading Skeleton -->
        <div id="ticketChargesLoading" class="loading-container">
          <div class="loading-header">
            <div class="skeleton-text" style="width: 200px; height: 24px;"></div>
            <div class="skeleton-button" style="width: 100px; height: 38px;"></div>
          </div>
          <div class="loading-grid">
            <div class="skeleton-card">
              <div class="skeleton-text skeleton-small"></div>
              <div class="skeleton-text skeleton-medium"></div>
              <div class="skeleton-text skeleton-large"></div>
            </div>
          </div>
        </div>

        <!-- Main Content -->
        <div id="ticketChargesContent" class="main-content" style="display: none;">
          <!-- Header with Add Button -->
          <div class="content-header">
            <h6 class="section-title">
              <i class="fas fa-list me-2"></i>Current Ticket Charges
            </h6>
            <button type="button" class="btn btn-success btn-sm" id="addTicketChargeBtn">
              <i class="fas fa-plus me-1"></i>Add New
            </button>
          </div>

          <!-- Ticket Charges List -->
          <div id="ticketChargesList" class="charges-grid">
            <!-- Dynamic content will be loaded here -->
          </div>

          <!-- Empty State -->
          <div id="emptyTicketCharges" class="empty-state" style="display: none;">
            <div class="empty-icon">
              <i class="fas fa-tags"></i>
            </div>
            <h6 class="empty-title">No ticket charges configured</h6>
            <p class="empty-description">Add ticket types and their charges to get started</p>
            <button type="button" class="btn btn-primary" id="addFirstTicketCharge">
              <i class="fas fa-plus me-2"></i>Add First Ticket Charge
            </button>
          </div>
        </div>
      </div>

      <div class="custom-modal-footer">
        <button type="button" class="btn btn-secondary" onclick="closeTicketChargesModal()">
          <i class="fas fa-times me-1"></i>Close
        </button>
        <button type="button" class="btn btn-primary" id="saveAllTicketCharges">
          <span class="btn-text">
            <i class="fas fa-save me-1"></i>Save All Changes
          </span>
          <span class="btn-spinner" style="display: none;">
            <i class="fas fa-spinner fa-spin me-1"></i>Saving...
          </span>
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Add/Edit Ticket Charge Modal -->
<div class="custom-modal-overlay" id="ticketChargeFormModalOverlay" style="display: none;">
  <div class="custom-modal custom-modal-small">
    <div class="custom-modal-content">
      <div class="custom-modal-header">
        <h5 class="custom-modal-title" id="ticketChargeFormModalLabel">
          <i class="fas fa-tag me-2"></i>Add Ticket Charge
        </h5>
        <button type="button" class="custom-close-btn" onclick="closeTicketChargeFormModal()">&times;</button>
      </div>
      
      <form id="ticketChargeForm">
        <div class="custom-modal-body">
          <input type="hidden" id="ticketChargeId" name="ticketChargeId">
          
          <!-- Ticket Type -->
          <div class="form-group">
            <label for="ticketType" class="form-label">
              <i class="fas fa-hashtag me-1"></i>Ticket Type
            </label>
            <input type="number" class="form-control" id="ticketType" name="ticketType" 
                   placeholder="Enter ticket type number" required min="1" step="1">
            <div class="form-help">
              <i class="fas fa-info-circle me-1"></i>Unique number identifier for this ticket type
            </div>
          </div>

          <!-- Charge Amount -->
          <div class="form-group">
            <label for="chargeAmount" class="form-label">
              <i class="fas fa-dollar-sign me-1"></i>Charge Amount
            </label>
            <div class="input-group">
              <span class="input-prefix">Nu</span>
              <input type="number" class="form-control" id="chargeAmount" name="chargeAmount" 
                     placeholder="0.00" required min="0" step="0.01">
            </div>
            <div class="form-help">
              <i class="fas fa-info-circle me-1"></i>Amount to charge for this ticket type
            </div>
          </div>
        </div>
        
        <div class="custom-modal-footer">
          <button type="button" class="btn btn-secondary" onclick="closeTicketChargeFormModal()">
            <i class="fas fa-times me-1"></i>Cancel
          </button>
          <button type="submit" class="btn btn-success">
            <span class="btn-text">
              <i class="fas fa-check me-1"></i>Save Ticket Charge
            </span>
            <span class="btn-spinner" style="display: none;">
              <i class="fas fa-spinner fa-spin me-1"></i>Saving...
            </span>
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Toast Container -->
<div class="toast-container" id="toastContainer"></div>

<style>
/* Custom Modal Styles */
.custom-modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 9999;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
}

.custom-modal-overlay.show {
  opacity: 1;
  visibility: visible;
}

.custom-modal {
  background: white;
  border-radius: 15px;
  box-shadow: 0 10px 30px rgba(0,0,0,0.3);
  max-width: 900px;
  width: 90%;
  max-height: 90vh;
  overflow-y: auto;
  transform: scale(0.7);
  transition: transform 0.3s ease;
}

.custom-modal-overlay.show .custom-modal {
  transform: scale(1);
}

.custom-modal-small {
  max-width: 500px;
}

.custom-modal-content {
  display: flex;
  flex-direction: column;
  height: 100%;
}

.custom-modal-header {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 1rem 1.5rem;
  border-radius: 15px 15px 0 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.custom-modal-title {
  margin: 0;
  font-weight: bold;
  font-size: 1.25rem;
}

.custom-close-btn {
  background: none;
  border: none;
  color: white;
  font-size: 1.5rem;
  cursor: pointer;
  padding: 0;
  width: 30px;
  height: 30px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s ease;
}

.custom-close-btn:hover {
  background-color: rgba(255, 255, 255, 0.2);
}

.custom-modal-body {
  padding: 1.5rem;
  flex: 1;
}

.custom-modal-footer {
  padding: 1rem 1.5rem;
  border-top: 1px solid #eee;
  border-radius: 0 0 15px 15px;
  display: flex;
  gap: 10px;
  justify-content: flex-end;
}

/* Loading Styles */
.loading-container {
  padding: 1rem;
}

.loading-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.loading-grid {
  display: grid;
  gap: 1rem;
}

.skeleton-card {
  background: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 10px;
  padding: 1rem;
}

.skeleton-text {
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200% 100%;
  animation: skeleton-loading 1.5s infinite;
  border-radius: 4px;
  height: 20px;
  margin-bottom: 10px;
}

.skeleton-small { width: 80px; }
.skeleton-medium { width: 150px; }
.skeleton-large { width: 120px; height: 36px; }

.skeleton-button {
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200% 100%;
  animation: skeleton-loading 1.5s infinite;
  border-radius: 8px;
  height: 38px;
}

@keyframes skeleton-loading {
  0% { background-position: 200% 0; }
  100% { background-position: -200% 0; }
}

/* Content Styles */
.main-content {
  padding: 1rem;
}

.content-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
}

.section-title {
  color: #6c757d;
  margin: 0;
  font-weight: 600;
}

.charges-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 1rem;
}

/* Ticket Charge Card Styles */
.ticket-charge-card {
  background: white;
  border: 2px solid #e9ecef;
  border-radius: 12px;
  padding: 1rem;
  transition: all 0.3s ease;
  position: relative;
}

.ticket-charge-card:hover {
  border-color: #667eea;
  box-shadow: 0 5px 15px rgba(102, 126, 234, 0.1);
  transform: translateY(-2px);
}

.ticket-charge-card.editing {
  border-color: #ffc107;
  box-shadow: 0 0 0 3px rgba(255, 193, 7, 0.1);
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 1rem;
}

.ticket-type-badge {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 8px 16px;
  border-radius: 20px;
  font-weight: 600;
  font-size: 0.9rem;
  display: inline-flex;
  align-items: center;
  box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
}

.charge-amount {
  font-size: 1.25rem;
  font-weight: 700;
  color: #28a745;
  display: flex;
  align-items: center;
}

.card-actions {
  display: flex;
  gap: 8px;
}

.btn-icon {
  width: 36px;
  height: 36px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  border: none;
  cursor: pointer;
  transition: all 0.2s ease;
}

.btn-edit {
  background: #ffc107;
  color: #000;
}

.btn-edit:hover {
  background: #e0a800;
  transform: scale(1.05);
}

.btn-delete {
  background: #dc3545;
  color: white;
}

.btn-delete:hover {
  background: #c82333;
  transform: scale(1.05);
}

.card-meta {
  margin-top: 0.5rem;
  color: #6c757d;
  font-size: 0.875rem;
}

/* Empty State */
.empty-state {
  text-align: center;
  padding: 3rem 1rem;
}

.empty-icon {
  font-size: 3rem;
  color: rgba(108, 117, 125, 0.3);
  margin-bottom: 1rem;
}

.empty-title {
  color: #6c757d;
  margin-bottom: 0.5rem;
}

.empty-description {
  color: #6c757d;
  font-size: 0.875rem;
  margin-bottom: 1rem;
}

/* Form Styles */
.form-group {
  margin-bottom: 1rem;
}

.form-label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 600;
  color: #495057;
}

.form-control {
  width: 100%;
  padding: 12px;
  border: 2px solid #e9ecef;
  border-radius: 8px;
  font-size: 1rem;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.form-control:focus {
  border-color: #667eea;
  box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
  outline: none;
}

.input-group {
  display: flex;
  position: relative;
}

.input-prefix {
  background: #f8f9fa;
  border: 2px solid #e9ecef;
  border-right: none;
  border-radius: 8px 0 0 8px;
  padding: 12px 16px;
  font-weight: 600;
  display: flex;
  align-items: center;
}

.input-group .form-control {
  border-left: none;
  border-radius: 0 8px 8px 0;
}

.form-help {
  margin-top: 0.25rem;
  font-size: 0.875rem;
  color: #6c757d;
}

/* Button Styles */
.btn {
  padding: 8px 16px;
  border: none;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
  text-decoration: none;
}

.btn-sm {
  padding: 6px 12px;
  font-size: 0.875rem;
}

.btn-primary {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.btn-primary:hover {
  background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
  transform: translateY(-1px);
}

.btn-success {
  background: #28a745;
  color: white;
}

.btn-success:hover {
  background: #218838;
  transform: translateY(-1px);
}

.btn-secondary {
  background: #6c757d;
  color: white;
}

.btn-secondary:hover {
  background: #5a6268;
}

.btn.loading .btn-text {
  display: none;
}

.btn.loading .btn-spinner {
  display: inline-flex;
}

.btn-spinner {
  display: none;
}

/* Toast Styles */
.toast-container {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 10000;
}

.toast {
  background: white;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  margin-bottom: 10px;
  padding: 12px 16px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  min-width: 300px;
  opacity: 0;
  transform: translateX(100%);
  transition: all 0.3s ease;
}

.toast.show {
  opacity: 1;
  transform: translateX(0);
}

.toast.success { border-left: 4px solid #28a745; }
.toast.error { border-left: 4px solid #dc3545; }
.toast.info { border-left: 4px solid #17a2b8; }

.toast-body {
  flex: 1;
  display: flex;
  align-items: center;
}

.toast-close {
  background: none;
  border: none;
  font-size: 1.2rem;
  cursor: pointer;
  color: #6c757d;
  margin-left: 10px;
}

.toast-close:hover {
  color: #495057;
}

/* Responsive */
@media (max-width: 768px) {
  .custom-modal {
    width: 95%;
    margin: 1rem;
  }
  
  .charges-grid {
    grid-template-columns: 1fr;
  }
  
  .content-header {
    flex-direction: column;
    gap: 1rem;
    align-items: stretch;
  }
  
  .card-actions {
    flex-direction: column;
  }
  
  .btn-icon {
    width: 100%;
    height: 40px;
  }
}

/* Animation for adding new cards */
.ticket-charge-card.new-card {
  animation: slideInUp 0.5s ease-out;
}

@keyframes slideInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Utility classes */
.me-1 { margin-right: 0.25rem; }
.me-2 { margin-right: 0.5rem; }
.fa-spin { animation: fa-spin 2s infinite linear; }

@keyframes fa-spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
</style>

<script>
(function() {
    'use strict';
    
    // Global variables
    let ticketCharges = [];
    let editingChargeId = null;
    
    // GLOBAL FUNCTIONS FOR OPENING MODALS
    window.openTicketChargesModal = function() {
        console.log('Opening ticket charges modal');
        showModal('ticketChargesModalOverlay');
    };
    
    window.showTicketCharges = function() {
        window.openTicketChargesModal();
    };
    
    window.closeTicketChargesModal = function() {
        hideModal('ticketChargesModalOverlay');
    };
    
    window.closeTicketChargeFormModal = function() {
        hideModal('ticketChargeFormModalOverlay');
        // Reset editing state
        document.querySelectorAll('.ticket-charge-card').forEach(card => {
            card.classList.remove('editing');
        });
        editingChargeId = null;
    };
    
    // Modal show/hide functions
    function showModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.style.display = 'flex';
            setTimeout(() => {
                modal.classList.add('show');
            }, 10);
            
            // Load charges if it's the main modal
            if (modalId === 'ticketChargesModalOverlay') {
                loadTicketCharges();
            }
        }
    }
    
    function hideModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.remove('show');
            setTimeout(() => {
                modal.style.display = 'none';
            }, 300);
        }
    }
    
    // Close modal when clicking outside
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('custom-modal-overlay')) {
            if (e.target.id === 'ticketChargesModalOverlay') {
                closeTicketChargesModal();
            } else if (e.target.id === 'ticketChargeFormModalOverlay') {
                closeTicketChargeFormModal();
            }
        }
    });
    
    // Event delegation for click events
    document.addEventListener('click', function(e) {
        // Main trigger buttons
        const triggerElement = e.target.closest('.see-charges-btn, #see-charges-btn, .seeChargesBtn, #seeChargesBtn, [data-action="ticket-charges"]');
        if (triggerElement) {
            e.preventDefault();
            e.stopPropagation();
            
            // Show loading state
            const originalContent = triggerElement.innerHTML;
            triggerElement.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Loading...';
            triggerElement.disabled = true;
            
            setTimeout(() => {
                window.openTicketChargesModal();
                // Reset button
                setTimeout(() => {
                    triggerElement.innerHTML = originalContent;
                    triggerElement.disabled = false;
                }, 500);
            }, 200);
            return;
        }
        
        // Add ticket charge buttons
        if (e.target.matches('#addTicketChargeBtn, #addFirstTicketCharge')) {
            e.preventDefault();
            openAddTicketChargeForm();
            return;
        }
        
        // Save all button
        if (e.target.matches('#saveAllTicketCharges')) {
            e.preventDefault();
            showToast('All changes have been saved automatically', 'info');
            closeTicketChargesModal();
            return;
        }
    });
    
    // Load ticket charges function
    async function loadTicketCharges() {
        try {
            show(document.getElementById('ticketChargesLoading'));
            hide(document.getElementById('ticketChargesContent'));
            
            const response = await fetch('/api/ticket-charges');
            if (!response.ok) throw new Error('Failed to load ticket charges');
            
            const data = await response.json();
            ticketCharges = data.ticketCharges || [];
            
            setTimeout(() => {
                renderTicketCharges();
                hide(document.getElementById('ticketChargesLoading'));
                show(document.getElementById('ticketChargesContent'));
            }, 800);
            
        } catch (error) {
            console.error('Error loading ticket charges:', error);
            hide(document.getElementById('ticketChargesLoading'));
            show(document.getElementById('ticketChargesContent'));
            showToast('Error loading ticket charges: ' + error.message, 'error');
        }
    }
    
    // Render ticket charges
    function renderTicketCharges() {
        const container = document.getElementById('ticketChargesList');
        const emptyState = document.getElementById('emptyTicketCharges');
        
        if (ticketCharges.length === 0) {
            container.innerHTML = '';
            show(emptyState);
            return;
        }
        
        hide(emptyState);
        
        // Sort by ticket type
        const sortedCharges = [...ticketCharges].sort((a, b) => a.ticketType - b.ticketType);
        
        const html = sortedCharges.map(charge => `
            <div class="ticket-charge-card" data-charge-id="${charge._id}">
                <div class="card-header">
                    <div class="ticket-type-badge">
                        <i class="fas fa-hashtag me-1"></i>Type ${charge.ticketType}
                    </div>
                    <div class="card-actions">
                        <button class="btn-icon btn-edit" onclick="editTicketCharge('${charge._id}')" title="Edit">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn-icon btn-delete" onclick="deleteTicketCharge('${charge._id}')" title="Delete">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                
                <div class="charge-amount">
                    <i class="fas fa-rupee-sign me-2"></i>
                    ${parseFloat(charge.chargeAmount).toFixed(2)}
                </div>
                
                <div class="card-meta">
                    <i class="fas fa-clock me-1"></i>
                    ${charge.updatedAt ? new Date(charge.updatedAt).toLocaleDateString() : 'Just created'}
                </div>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }
    
    // Open add form
    function openAddTicketChargeForm() {
        editingChargeId = null;
        document.getElementById('ticketChargeFormModalLabel').innerHTML = '<i class="fas fa-tag me-2"></i>Add Ticket Charge';
        document.getElementById('ticketChargeForm').reset();
        document.getElementById('ticketChargeId').value = '';
        showModal('ticketChargeFormModalOverlay');
    }
    
    // Global edit function
    window.editTicketCharge = function(chargeId) {
        const charge = ticketCharges.find(c => c._id === chargeId);
        if (!charge) return;
        
        editingChargeId = chargeId;
        document.getElementById('ticketChargeFormModalLabel').innerHTML = '<i class="fas fa-edit me-2"></i>Edit Ticket Charge';
        document.getElementById('ticketChargeId').value = charge._id;
        document.getElementById('ticketType').value = charge.ticketType;
        document.getElementById('chargeAmount').value = charge.chargeAmount;
        
        // Highlight editing card
        document.querySelectorAll('.ticket-charge-card').forEach(card => {
            card.classList.remove('editing');
        });
        const editingCard = document.querySelector(`[data-charge-id="${chargeId}"]`);
        if (editingCard) editingCard.classList.add('editing');
        
        showModal('ticketChargeFormModalOverlay');
    };
    
    // Global delete function
    window.deleteTicketCharge = function(chargeId) {
        const charge = ticketCharges.find(c => c._id === chargeId);
        if (!charge) return;
        
        if (confirm(`Are you sure you want to delete Ticket Type ${charge.ticketType}?`)) {
            deleteTicketChargeAPI(chargeId);
        }
    };
    
    // Delete API call
    async function deleteTicketChargeAPI(chargeId) {
        try {
            const response = await fetch(`/api/ticket-charges/${chargeId}`, {
                method: 'DELETE'
            });
            
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to delete ticket charge');
            }
            
            // Remove from array
            ticketCharges = ticketCharges.filter(c => c._id !== chargeId);
            renderTicketCharges();
            showToast('Ticket charge deleted successfully', 'success');
            
        } catch (error) {
            console.error('Error deleting ticket charge:', error);
            showToast('Error deleting ticket charge: ' + error.message, 'error');
        }
    }
    
    // Form submission
    document.addEventListener('submit', async function(e) {
        if (e.target.id === 'ticketChargeForm') {
            e.preventDefault();
            
            const submitBtn = e.target.querySelector('button[type="submit"]');
            submitBtn.classList.add('loading');
            
            try {
                const formData = new FormData(e.target);
                const ticketChargeData = {
                    ticketType: parseInt(formData.get('ticketType')),
                    chargeAmount: parseFloat(formData.get('chargeAmount'))
                };
                
                // Check for duplicate ticket type
                const existingCharge = ticketCharges.find(c => 
                    c.ticketType === ticketChargeData.ticketType && c._id !== editingChargeId
                );
                
                if (existingCharge) {
                    throw new Error(`Ticket Type ${ticketChargeData.ticketType} already exists`);
                }
                
                let response;
                if (editingChargeId) {
                    // Update existing
                    response = await fetch(`/api/ticket-charges/${editingChargeId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(ticketChargeData)
                    });
                } else {
                    // Create new
                    response = await fetch('/api/ticket-charges', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(ticketChargeData)
                    });
                }
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to save ticket charge');
                }
                
                const result = await response.json();
                
                if (editingChargeId) {
                    // Update existing in array
                    const index = ticketCharges.findIndex(c => c._id === editingChargeId);
                    if (index !== -1) {
                        ticketCharges[index] = result.ticketCharge;
                    }
                    showToast('Ticket charge updated successfully', 'success');
                } else {
                    // Add new to array
                    ticketCharges.push(result.ticketCharge);
                    showToast('Ticket charge added successfully', 'success');
                }
                
                renderTicketCharges();
                closeTicketChargeFormModal();
                
            } catch (error) {
                console.error('Error saving ticket charge:', error);
                showToast('Error: ' + error.message, 'error');
            } finally {
                submitBtn.classList.remove('loading');
            }
        }
    });
    
    // Toast notification function
    function showToast(message, type = 'info') {
        let container = document.getElementById('toastContainer');
        if (!container) {
            container = document.createElement('div');
            container.className = 'toast-container';
            container.id = 'toastContainer';
            document.body.appendChild(container);
        }
        
        const icon = type === 'error' ? 'fa-exclamation-circle' : type === 'success' ? 'fa-check-circle' : 'fa-info-circle';
        
        const toastElement = document.createElement('div');
        toastElement.className = `toast ${type}`;
        
        toastElement.innerHTML = `
            <div class="toast-body">
                <i class="fas ${icon} me-2"></i>${message}
            </div>
            <button type="button" class="toast-close" onclick="this.parentElement.remove()">&times;</button>
        `;
        
        container.appendChild(toastElement);
        
        // Show toast
        setTimeout(() => {
            toastElement.classList.add('show');
        }, 10);
        
        // Auto remove after 4 seconds
        setTimeout(() => {
            toastElement.classList.remove('show');
            setTimeout(() => {
                if (toastElement.parentElement) {
                    toastElement.remove();
                }
            }, 300);
        }, 4000);
    }
    
    // Helper functions
    function show(element) {
        if (element) element.style.display = 'block';
    }
    
    function hide(element) {
        if (element) element.style.display = 'none';
    }
    
    console.log('Ticket charges modal script loaded - NO DEPENDENCIES');
})();
</script>