<%# winning-numbers-animation.ejs - Fixed Positioning, Animation + Audio %>

<style>
  /* Animation styles for winning numbers */
  .winning-numbers-container {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 12px;
    margin: 15px 0;
    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2),
                0 6px 20px 0 rgba(0, 0, 0, 0.19);
    border-radius: 6px;
  }
  
  .winning-number {
    display: flex;
    justify-content: center;
    margin: 5px;
  }
  
  .digit-container {
    position: relative;
    width: 45px;
    height: 68px;
    overflow: hidden;
    perspective: 400px;
  }
  
  .digit-stack {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    transform-style: preserve-3d;
    transition: transform 1.2s cubic-bezier(0.34, 1.56, 0.64, 1);
    z-index: 1;
  }
  
  .digit {
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 22px;
    font-weight: 700;
    color: #000;
    width: 100%;
    height: 70px;
    background: transparent;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
  }
  
  .counter-box-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url('/images/counter-box.png');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    z-index: 3;
    pointer-events: none;
  }
  
  .ticket-label {
    text-align: center;
    font-size: 0.9rem;
    color: #666;
    margin-top: 5px;
  }
  
  /* Style for collapsed content */
  .result-content.collapsed {
    display: none;
  }
  
  .result-content:not(.collapsed) {
    display: block;
  }

  /* Other Prize Container Animation */
  .otherPrizeContainer {
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.6s ease;
    visibility: hidden;
    overflow: hidden;
    display: none;
  }

  .otherPrizeContainer.show {
    opacity: 1;
    transform: translateY(0);
    visibility: visible;
    height: auto; /* Allow natural height */
    display: block;
  }

  /* Enhanced animation for individual win items */
  .win-items {
    opacity: 0;
    transform: translateX(-20px);
    transition: all 0.4s ease;
  }

  .win-items.animate {
    opacity: 1;
    transform: translateX(0);
  }

  /* Add these new badge styles */
  .next-draw-badge {
    background: linear-gradient(45deg, #10B981, #34D399);
    color: white;
    animation: pulse 2s infinite;
    font-size: 0.875rem;
    font-weight: 800;
    padding: 6px 12px;
  }

  .refresh-btn {
    background: linear-gradient(135deg, #F59E0B 0%, #F97316 100%);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 8px 16px;
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .refresh-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(245, 158, 11, 0.3);
  }

  .refresh-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }
</style>

<!-- ðŸŽµ Add your counting audio file -->
<audio id="count-audio" src="/audio/counting.mp3" preload="auto"></audio>

<script>
 
   // Toggle result and trigger animation
  function toggleResult(id) {
    const element = document.getElementById(id);
    const arrow = document.getElementById('arrow-' + id);

    element.classList.toggle('collapsed');
    arrow.classList.toggle('fa-chevron-down');
    arrow.classList.toggle('fa-chevron-up');

    if (!element.classList.contains('collapsed')) {
      setTimeout(() => {
        animateWinningNumbers(id);
      }, 50);
    } else {
      // Hide all other prizes when collapsing
      hideAllOtherPrizes(id);
    }
  }

  // Initialize animation for a specific card
  function animateWinningNumbers(cardId) {
    const container = document.getElementById(cardId);
    const winningNumberElements = container.querySelectorAll('.winning-number');
    const otherPrizeContainers = container.querySelectorAll('.otherPrizeContainer');

    // Hide all other prizes initially
    otherPrizeContainers.forEach(otherPrizeContainer => {
      otherPrizeContainer.classList.remove('show');
      // Reset individual win items
      const winItems = otherPrizeContainer.querySelectorAll('.win-items');
      winItems.forEach(item => {
        item.classList.remove('animate');
      });
    });

    // ðŸŽµ Get audio element
    const audio = document.getElementById('count-audio');

    // ðŸŽµ Play audio when animation starts
    if (audio) {
      audio.currentTime = 0;
      audio.loop = true; 
      audio.play();
    }

    // Animate all digits immediately for all winning numbers
    winningNumberElements.forEach((element) => {
      const ticketNumber = element.getAttribute('data-ticket-number') || element.textContent;
      initializeTicketNumber(element, ticketNumber);
      animateTicketNumber(element, ticketNumber);
    });

    // ðŸŽµ Stop audio after rolling ends (4s roll + 0.8s smooth landing)
    setTimeout(() => {
      if (audio) {
        audio.pause();
        audio.currentTime = 0;
      }
    }, 6500);

    // âœ¨ Show all other prizes after main animation completes
    setTimeout(() => {
      showAllOtherPrizes(cardId);
    }, 10000); // 4s roll + 0.8s landing + 2s buffer
  }

  // Show all other prizes with animation
  function showAllOtherPrizes(cardId) {
    const container = document.getElementById(cardId);
    const otherPrizeContainers = container.querySelectorAll('.otherPrizeContainer');
    
    otherPrizeContainers.forEach((otherPrizeContainer, containerIndex) => {
      // Show each container with a slight delay
      setTimeout(() => {
        otherPrizeContainer.classList.add('show');
        
        // Then animate individual items with staggered delay
        const winItems = otherPrizeContainer.querySelectorAll('.win-items');
        winItems.forEach((item, itemIndex) => {
          setTimeout(() => {
            item.classList.add('animate');
          }, itemIndex * 150); // 150ms delay between each item
        });
      }, containerIndex * 300); // 300ms delay between each container
    });
  }

  // Hide all other prizes when collapsing
  function hideAllOtherPrizes(cardId) {
    const container = document.getElementById(cardId);
    const otherPrizeContainers = container.querySelectorAll('.otherPrizeContainer');
    
    otherPrizeContainers.forEach(otherPrizeContainer => {
      otherPrizeContainer.classList.remove('show');
      const winItems = otherPrizeContainer.querySelectorAll('.win-items');
      winItems.forEach(item => {
        item.classList.remove('animate');
      });
    });
  }

  // Initialize a ticket number display
  function initializeTicketNumber(container, ticketNumber) {
    container.innerHTML = '';
    const actualNumber = ticketNumber.toString();

    for (let i = 0; i < actualNumber.length; i++) {
      const digitContainer = document.createElement('div');
      digitContainer.className = 'digit-container';

      const digitStack = document.createElement('div');
      digitStack.className = 'digit-stack';

      // Create 100 digits with random numbers
      for (let j = 0; j < 120; j++) {
        const digit = document.createElement('div');
        digit.className = 'digit';
        digit.textContent = Math.floor(Math.random() * 10); 
        digitStack.appendChild(digit);
      }

      const counterBoxOverlay = document.createElement('div');
      counterBoxOverlay.className = 'counter-box-overlay';

      digitContainer.appendChild(digitStack);
      digitContainer.appendChild(counterBoxOverlay);
      container.appendChild(digitContainer);

      // FIXED: Start closer so digits are visible instantly
      digitStack.style.transform = 'translateY(-350px)';
    }
  }

  // Animate a ticket number with fixed 4s duration
  function animateTicketNumber(container, ticketNumber) {
    const actualNumber = ticketNumber.toString();
    const digitStacks = container.querySelectorAll('.digit-stack');

    for (let i = 0; i < actualNumber.length; i++) {
      const targetDigit = parseInt(actualNumber[i]);
      const digitStack = digitStacks[i];

      const stepDelay = 70 - (i * 10); 
      const totalSteps = Math.floor(4000 / stepDelay); // force 4s roll
      let currentStep = totalSteps;

      const randomInterval = setInterval(() => {
        currentStep--;
        const currentPosition = currentStep * 70;
        digitStack.style.transform = `translateY(-${currentPosition}px)`;

        if (currentStep <= 0) {
          clearInterval(randomInterval);

          // Ensure correct digit lands
          const digits = digitStack.querySelectorAll('.digit');
          if (digits[0]) digits[0].textContent = targetDigit;

          // Smooth final landing
          setTimeout(() => {
            digitStack.style.transition = 'transform 0.8s cubic-bezier(0.19, 1, 0.22, 1)';
            digitStack.style.transform = `translateY(0px)`;
          }, 50);
        }
      }, stepDelay);
    }
  }
</script>

